import './App.scss';

import React, { useEffect, useMemo } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';
import MalwareRoutes from './Routes';

const App = (props) => {
    const { pathname } = useLocation();
    const navigate = useNavigate();
    const chrome = useChrome();
    const appNavClick = useMemo(
        () => ({
            signatures(redirect) {
                chrome.appNavClick({ id: 'signatures', redirect });
            },
            systems(redirect) {
                chrome.appNavClick({ id: 'systems', redirect });
            }
        }),
        []
    );

    useEffect(() => {
        chrome.init();
        const baseComponentUrl = pathname.split('/')[4];
        const unregister = chrome.on('APP_NAVIGATION', (event) => {
            if (event.domEvent) {
                navigate(`/${event.navId}`);
                appNavClick[baseComponentUrl] !== undefined
                    ? appNavClick[baseComponentUrl](true)
                    : appNavClick.signatures;
            }
        });

        return () => unregister();
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    return  <MalwareRoutes childProps={props} />;
};

export default App;
