/* eslint-disable react/display-name */
import React, { lazy, useEffect, useState } from 'react';
import { useRoutes } from 'react-router-dom';
import { Permissions } from './Components/Permissions';
import axios from 'axios';
import AsynComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';

const SignatureList = lazy(() => import(/* webpackChunkName: 'Signature List' */ './Routes/Signatures/Signatures'));
const SignatureDetails = lazy(() => import(/* webpackChunkName: "Signature Details" */ './Routes/Signatures/Details'));
const SystemsList = lazy(() => import(/* webpackChunkName: 'System List' */ './Routes/Systems/Systems'));
const SystemsDetails = lazy(() => import(/* webpackChunkName: "System Details" */ './Routes/Systems/Details'));

const INVENTORY_TOTAL_FETCH_URL = '/api/inventory/v1/hosts';
export const BASE_PATH = '/insights/malware';

const  MalwareRoutes = () => {
    const [hasSystems, setHasSystems] = useState(true);

    useEffect(() => {
        try {
            axios
            .get(`${INVENTORY_TOTAL_FETCH_URL}?page=1&per_page=1`)
            .then(({ data }) => {
                setHasSystems(data.total > 0);
            });
        } catch (e) {
            console.log(e);
        }
    }, [hasSystems]);

    let element = useRoutes([
        {
            path: '/*',
            element: <Permissions><SignatureList /></Permissions>
        },
        { path: '/signatures/:id', element: <Permissions><SignatureDetails /></Permissions> },
        { path: '/systems', element: <Permissions><SystemsList /></Permissions> },
        {
            path: '/systems/:id',
            element: <Permissions><SystemsDetails /></Permissions>
        }
    ]);

    return !hasSystems ?
        (<AsynComponent
            appId="malware_zero_state"
            appName="dashboard"
            module="./AppZeroState"
            scope="dashboard"
            ErrorComponent={ <ErrorState /> }
            app="Malware"
        />)
        : element;
};

export default MalwareRoutes;
