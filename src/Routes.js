import React, { lazy, useEffect, useState } from 'react';
import { useRoutes, Navigate } from 'react-router-dom';
import axios from 'axios';

import AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';
import { Permissions } from './Components/Permissions';

const SignatureList = lazy(() =>
  import(
    /* webpackChunkName: 'Signature List' */ './Routes/Signatures/Signatures'
  )
);
const SignatureDetails = lazy(() =>
  import(
    /* webpackChunkName: "Signature Details" */ './Routes/Signatures/Details'
  )
);
const SystemsList = lazy(() =>
  import(/* webpackChunkName: 'System List' */ './Routes/Systems/Systems')
);
const SystemsDetails = lazy(() =>
  import(/* webpackChunkName: "System Details" */ './Routes/Systems/Details')
);

const INVENTORY_TOTAL_FETCH_URL = '/api/inventory/v1/hosts';
export const BASE_PATH = '/insights/malware';
const RHEL_ONLY_FILTER =
  '?filter[system_profile][operating_system][RHEL][version][gte]=0';

const MalwareRoutes = () => {
  const [hasSystems, setHasSystems] = useState(true);

  useEffect(() => {
    try {
      axios
        .get(
          `${INVENTORY_TOTAL_FETCH_URL}${RHEL_ONLY_FILTER}&page=1&per_page=1`
        )
        .then(({ data }) => {
          setHasSystems(data.total > 0);
        });
    } catch (e) {
      console.error(e);
    }
  }, [hasSystems]);

  let element = useRoutes([
    {
      path: '/signatures',
      element: (
        <Permissions>
          <SignatureList />
        </Permissions>
      ),
    },
    {
      path: '/signatures/:id',
      element: (
        <Permissions>
          <SignatureDetails />
        </Permissions>
      ),
    },
    {
      path: '/systems',
      element: (
        <Permissions>
          <SystemsList />
        </Permissions>
      ),
    },
    {
      path: '/systems/:id',
      element: (
        <Permissions>
          <SystemsDetails />
        </Permissions>
      ),
    },
    { path: '*', element: <Navigate to="signatures" /> },
  ]);

  return (
    <AsyncComponent
      appId="malware_zero_state"
      appName="dashboard"
      module="./AppZeroState"
      scope="dashboard"
      ErrorComponent={<ErrorState />}
      app="Malware"
      customFetchResults={hasSystems}
    >
      {element}
    </AsyncComponent>
  );
};

export default MalwareRoutes;
