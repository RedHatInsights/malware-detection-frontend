/* eslint-disable react/display-name */
import React, { Suspense, lazy, useEffect, useState } from 'react';
import { Redirect, Route, Switch } from 'react-router-dom';

import { Permissions } from './Components/Permissions';
import axios from 'axios';
import { Bullseye, Spinner } from '@patternfly/react-core';
import AsynComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';

const SigRoutes = lazy(() => import(/* webpackChunkName: "Signatures" */ './Routes/Signatures/Routes'));
const SysRoutes = lazy(() => import(/* webpackChunkName: "Systems" */ './Routes/Systems/Routes'));

const paths = [
    { title: 'Signatures', path: '/signatures:?', render: ()=><Permissions><SigRoutes /></Permissions> },
    { title: 'Signatures', path: '/signatures', render: ()=><Permissions><SigRoutes /></Permissions> },
    { title: 'Systems', path: '/systems:?', render: ()=><Permissions><SysRoutes /></Permissions> },
    { title: 'Systems', path: '/systems', render: ()=><Permissions><SysRoutes /></Permissions> }
];
const INVENTORY_TOTAL_FETCH_URL = '/api/inventory/v1/hosts';

export const Routes = () => {
    const [hasSystems, setHasSystems] = useState(true);

    useEffect(() => {
        try {
            axios
            .get(`${INVENTORY_TOTAL_FETCH_URL}?page=1&per_page=1`)
            .then(({ data }) => {
                setHasSystems(data.total > 0);
            });
        } catch (e) {
            console.log(e);
        }
    }, [hasSystems]);

    return (
        <Suspense
            fallback={
                <Bullseye>
                    <Spinner size="xl" />
                </Bullseye>
            }
        >
            {!hasSystems ?
                (<AsynComponent
                    appName="dashboard"
                    module="./AppZeroState"
                    scope="dashboard"
                    ErrorComponent={ <ErrorState /> }
                    app="Malware"
                />)
                :
                <Switch>
                    {paths.map((path) => (
                        <Route
                            key={path.title}
                            {...path}
                        />
                    ))}
                    <Redirect path="/signatures" to={`${paths[1].path}`} push />
                    {/* Finally, catch all unmatched routes */}
                    <Redirect path="*" to={`${paths[1].path}`} push />
                </Switch>}
        </Suspense>
    );};
