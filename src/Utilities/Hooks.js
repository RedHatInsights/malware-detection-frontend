import { useFlag, useFlagsStatus } from '@unleash/proxy-client-react';
import { useMutation } from '@apollo/client';
import { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';
import { RBACPermissions } from '../Components/Common';
import { DELETE_MATCH } from '../operations/mutations';

export const useFeatureFlag = (flag) => {
  const { flagsReady } = useFlagsStatus();
  const isFlagEnabled = useFlag(flag);
  return flagsReady ? isFlagEnabled : undefined;
};

export const useWorkspaceFeatureFlag = () =>
  useFeatureFlag('platform.rbac.groups-to-workspaces-rename');

export const useNewMatchesFeatureFlag = () =>
  useFeatureFlag('insights.malware.matches');

export const useActionsConfig = (
  selectedMatches,
  fetchDetailsTable,
  fetchDetailsTableGroups
) => {
  const [deleteMatch] = useMutation(DELETE_MATCH);
  const { hasAccess: hasDeleteAccess, isLoading: isDeleteAccessLoading } =
    usePermissions('malware-detection', RBACPermissions.write);

  return [
    '',
    {
      label: 'Delete matches',
      props: !isDeleteAccessLoading && !hasDeleteAccess,
      onClick: () => {
        try {
          deleteMatch({
            variables: {
              input: selectedMatches,
            },
          });
          fetchDetailsTable && fetchDetailsTable(true);
          fetchDetailsTableGroups && fetchDetailsTableGroups(true);
        } catch (error) {
          console.error('Error fetching data:', error);
        }
      },
    },
  ];
};
