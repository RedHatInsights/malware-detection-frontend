import React, { useEffect, useMemo, useRef } from 'react';
import PropTypes from 'prop-types';
import { Provider } from 'react-redux';
import { ApolloClient, ApolloProvider, createHttpLink } from '@apollo/client';
import { setContext } from '@apollo/client/link/context';
import { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';
import {
  NotificationsPortal,
  notifications,
} from '@redhat-cloud-services/frontend-components-notifications';
import { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';
import { cache } from './store/cache';
import { init, RegistryContext } from './store';
import { globalFilters } from './store/cache';
import messages from '../locales/data.json';
import Loading from './Components/Loading/Loading';
import App from './App';

const AppEntry = ({ logger, connectToDevTools }) => {
  const storeRegistry = useMemo(() => {
    const registry = logger ? init(logger) : init();
    registry.register({ notifications });
    return registry;
  }, [logger]);
  const tags = useRef();
  const selectedWorkloads = useRef();
  const selectedSID = useRef();
  const chrome = useChrome();

  const globalFilterLink = setContext((_, { headers }) => ({
    headers: {
      ...headers,
      ...(tags.current?.length && { 'insights-tags': `${tags.current}` }),
      ...(selectedWorkloads.current?.SAP?.isSelected && {
        'insights-sap-system': true,
      }),
      ...(selectedWorkloads.current['Ansible Automation Platform']
        ?.isSelected && { 'insights-ansible-system': true }),
      ...(selectedWorkloads.current['Microsoft SQL']?.isSelected && {
        'insights-mssql-system': true,
      }),
      ...(selectedSID.current?.length && {
        'insights-sap-sids': `${selectedSID.current}`,
      }),
    },
  }));

  const client = new ApolloClient(
    {
      link: globalFilterLink.concat(
        createHttpLink({
          uri: '/api/malware-detection/v1/graphql',
        })
      ),
      cache,
      connectToDevTools,
    },
    `${tags.current}`
  );

  useEffect(() => {
    if (chrome.globalFilterScope) {
      const unlisten = chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {
        const [workloads, SID, selectedTags] =
          chrome.mapGlobalFilter?.(data, false, true) || [];
        tags.current = selectedTags?.join(',') || '';

        selectedWorkloads.current = workloads || {};
        selectedSID.current = SID || [];

        globalFilters({ workloads, SID, selectedTags });
      });
      return () => unlisten();
    }
  }, [client, chrome]);

  useEffect(() => {
    client.resetStore();
  }, [tags.current, selectedWorkloads.current, selectedSID.current]);

  return storeRegistry ? (
    <IntlProvider
      locale={navigator.language.slice(0, 2)}
      messages={messages}
      onError={console.log}
    >
      <ApolloProvider client={client}>
        <RegistryContext.Provider value={{ getRegistry: () => storeRegistry }}>
          <Provider store={storeRegistry.getStore()}>
            <NotificationsPortal />
            <App />
          </Provider>
        </RegistryContext.Provider>
      </ApolloProvider>
    </IntlProvider>
  ) : (
    <Loading />
  );
};

AppEntry.propTypes = {
  logger: PropTypes.any,
  connectToDevTools: PropTypes.bool,
};

export default AppEntry;
