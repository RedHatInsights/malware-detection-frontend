import { GET_SIGNATURE_PAGE, GET_TIME_SERIES_STATS } from '../../operations/queries';
import { Alert, Grid, GridItem, Split, SplitItem } from '@patternfly/react-core';
import React, { Suspense, lazy, useEffect } from 'react';
import { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';
import { Popover } from '@patternfly/react-core';
import Loading from '../../Components/Loading/Loading';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';
import messages from '../../Messages';
import { useIntl } from 'react-intl';
import { useQuery } from '@apollo/client';
import { hasMalware } from '../../store/cache';
import { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';
import { DocumentationLink } from '../../Components/Common';

const SigTable = lazy(() => import(/* webpackChunkName: 'SigTable' */ '../../Components/SigTable/SigTable'));
const StatusCard = lazy(() => import(/* webpackChunkName: 'StatusCard' */ '../../Components/StatusCard/StatusCard'));
const ChartCard = lazy(() => import(/* webpackChunkName: 'ChartCard' */ '../../Components/ChartCard/ChartCard'));

const Signatures = () => {
    const intl = useIntl();
    const { data, loading, error, refetch } = useQuery(GET_SIGNATURE_PAGE);
    const sigPageData = { data, loading, error };
    const chartCmpData = useQuery(GET_TIME_SERIES_STATS);
    const chrome = useChrome();
    useEffect(() => {
        chrome.updateDocumentTitle(`Signatures - Malware | Red Hat Insights`);
    }, [chrome]);

    // set hasMalware to true if any enabled rules have matches (disabled rules don't count)
    const matchedCount = data?.ruleStats?.matchedCount;
    matchedCount && hasMalware(+matchedCount !== 0);

    return <React.Fragment>
        <PageHeader>
            <Split hasGutter isWrappable>
                <SplitItem>
                    <PageHeaderTitle title={(<Popover
                        enableFlip
                        position={'right'}
                        headerContent={intl.formatMessage(messages.headerPopoverTitle)}
                        bodyContent={(<Grid hasGutter>
                            <GridItem>{intl.formatMessage(messages.headerPopoverBody1)}</GridItem>
                        </Grid>)}
                        footerContent={(<DocumentationLink>
                            {intl.formatMessage(messages.headerPopoverFooter)}
                        </DocumentationLink>)}
                    >
                        <PageHeaderTitle
                            title={
                                <span>
                                    {intl.formatMessage(messages.signatures)}
                                    <OutlinedQuestionCircleIcon
                                        color="var(--pf-global--secondary-color--100)"
                                        className="pf-u-ml-sm pointer signatures-header-questionmark"
                                        style={{ verticalAlign: '0' }}
                                    />
                                </span>
                            }
                        />
                    </Popover>)} />
                </SplitItem>
            </Split>
            {hasMalware() &&
                <Alert
                    isInline
                    variant="danger"
                    ouiaId="WeDetectedMalware"
                    title={intl.formatMessage(messages.weDetected)}
                    className="pf-u-mt-md"
                />
            }
        </PageHeader>
        <Main className='pf-u-pt-sm'>
            <Grid hasGutter>
                <GridItem lg={6} md={12}>
                    <Suspense fallback={<Loading />}><StatusCard {...sigPageData} /></Suspense>
                </GridItem>
                <GridItem lg={6} md={12}>
                    <Suspense fallback={<Loading />}><ChartCard sysStats={sigPageData} chartStats={chartCmpData} /></Suspense>
                </GridItem>
                <GridItem span={12}>
                    <Suspense fallback={<Loading />}>
                        <SigTable refetchSigPageData={refetch}/></Suspense>
                </GridItem>
            </Grid>
        </Main>
    </React.Fragment>;
};

export default Signatures;
