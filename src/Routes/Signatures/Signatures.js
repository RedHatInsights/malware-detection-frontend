import React, { useEffect } from 'react';
import { useIntl } from 'react-intl';
import { useQuery } from '@apollo/client';
import {
  Alert,
  Grid,
  GridItem,
  Icon,
  Split,
  SplitItem,
  Popover,
} from '@patternfly/react-core';
import { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';
import {
  PageHeader,
  PageHeaderTitle,
} from '@redhat-cloud-services/frontend-components/PageHeader';
import {
  GET_SIGNATURE_PAGE,
  GET_TIME_SERIES_STATS,
} from '../../operations/queries';
import messages from '../../Messages';
import { hasMalware } from '../../store/cache';
import { DocumentationLink } from '../../Components/Common';
import SigTable from '../../Components/SigTable/SigTable';
import StatusCard from '../../Components/StatusCard/StatusCard';
import ChartCard from '../../Components/ChartCard/ChartCard';

const Signatures = () => {
  const intl = useIntl();
  const { data, loading, error, refetch } = useQuery(GET_SIGNATURE_PAGE);
  const sigPageData = { data, loading, error };
  const chartCmpData = useQuery(GET_TIME_SERIES_STATS);
  const chrome = useChrome();
  useEffect(() => {
    chrome.updateDocumentTitle(`Signatures - Malware`);
  }, [chrome]);

  // set hasMalware to true if any enabled rules have matches (disabled rules don't count)
  const matchedCount = data?.ruleStats?.matchedCount;
  matchedCount && hasMalware(+matchedCount !== 0);

  return (
    <React.Fragment>
      <PageHeader>
        <Split hasGutter isWrappable>
          <SplitItem>
            <PageHeaderTitle
              title={
                <Popover
                  enableFlip
                  position={'right'}
                  headerContent={intl.formatMessage(
                    messages.headerPopoverTitle
                  )}
                  bodyContent={
                    <Grid hasGutter>
                      <GridItem>
                        {intl.formatMessage(messages.headerPopoverBody1)}
                      </GridItem>
                    </Grid>
                  }
                  footerContent={
                    <DocumentationLink>
                      {intl.formatMessage(messages.headerPopoverFooter)}
                    </DocumentationLink>
                  }
                >
                  <PageHeaderTitle
                    title={
                      <span>
                        {intl.formatMessage(messages.signatures)}
                        <Icon
                          className="pf-u-ml-sm pointer signatures-header-questionmark"
                          style={{
                            verticalAlign: '0',
                            color: 'var(--pf-global--secondary-color--100)',
                          }}
                        >
                          <OutlinedQuestionCircleIcon />
                        </Icon>
                      </span>
                    }
                  />
                </Popover>
              }
            />
          </SplitItem>
        </Split>
        {hasMalware() && (
          <Alert
            isInline
            variant="danger"
            ouiaId="WeDetectedMalware"
            title={intl.formatMessage(messages.weDetected)}
            className="pf-u-mt-md"
          />
        )}
      </PageHeader>
      <Main className="pf-u-pt-sm">
        <Grid hasGutter>
          <GridItem lg={6} md={12}>
            <StatusCard {...sigPageData} />
          </GridItem>
          <GridItem lg={6} md={12}>
            <ChartCard sysStats={sigPageData} chartStats={chartCmpData} />
          </GridItem>
          <GridItem span={12}>
            <SigTable refetchSigPageData={refetch} />
          </GridItem>
        </Grid>
      </Main>
    </React.Fragment>
  );
};

export default Signatures;
