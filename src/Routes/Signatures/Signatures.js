import { GET_SIGNATURE_PAGE, GET_TIME_SERIES_STATS } from '../../operations/queries';
import { Alert, Grid, GridItem, Split, SplitItem } from '@patternfly/react-core';
import React, { Suspense, lazy } from 'react';
import { Title, TitleSizes } from '@patternfly/react-core/dist/esm/components/Title';
import { OutlinedQuestionCircleIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';
import { Popover } from '@patternfly/react-core';
import Loading from '../../Components/Loading/Loading';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';
import messages from '../../Messages';
import { useIntl } from 'react-intl';
import { useQuery } from '@apollo/client';
import { withRouter } from 'react-router-dom';

const SigTable = lazy(() => import(/* webpackChunkName: 'SigTable' */ '../../Components/SigTable/SigTable'));
const StatusCard = lazy(() => import(/* webpackChunkName: 'StatusCard' */ '../../Components/StatusCard/StatusCard'));
const ChartCard = lazy(() => import(/* webpackChunkName: 'ChartCard' */ '../../Components/ChartCard/ChartCard'));

const Signatures = () => {
    const intl = useIntl();
    const sigPageData = useQuery(GET_SIGNATURE_PAGE);
    const chartCmpData = useQuery(GET_TIME_SERIES_STATS);

    return <React.Fragment>
        <PageHeader>
            <Split hasGutter isWrappable>
                <SplitItem>
                    <PageHeaderTitle title={(<Popover
                        enableFlip
                        position={'right'}
                        headerContent={intl.formatMessage(messages.headerPopoverTitle)}
                        bodyContent={(<Grid hasGutter>
                            <GridItem>{intl.formatMessage(messages.headerPopoverBody1)}</GridItem>
                        </Grid>)}
                        footerContent={<a
                            href={'https://access.redhat.com/documentation/en-us/red_hat_insights/2023/html/' +
                            'assessing_and_reporting_malware_signatures_on_rhel_systems_with_the_insights_for' +
                            '_rhel_malware_service/'}
                            target="__blank" rel="noopener noreferrer">
                            {intl.formatMessage(messages.headerPopoverFooter)} <ExternalLinkAltIcon />
                        </a>}
                    >
                        <Title headingLevel='h1' size={TitleSizes['3xl']} className='pf-u-pb-lg'>
                            {intl.formatMessage(messages.malwareDetection)}
                            <OutlinedQuestionCircleIcon
                                color={'var(--pf-global--secondary-color--100)'}
                                className="pf-u-ml-sm pointer cves-header-questionmark"
                                style={{ verticalAlign: '-2' }}
                            />
                        </Title>
                    </Popover>)} />
                </SplitItem>
            </Split>
            <Alert
                isInline
                variant="danger"
                ouiaId="SystemsListIsDifferentAlert"
                title={intl.formatMessage(messages.weDetected)}
            />
        </PageHeader>
        <Main className='pf-u-pt-sm'>
            <Grid hasGutter>
                <GridItem lg={6} md={12}>
                    <Suspense fallback={<Loading />}><StatusCard {...sigPageData} /></Suspense>
                </GridItem>
                <GridItem lg={6} md={12}>
                    <Suspense fallback={<Loading />}><ChartCard sysStats={sigPageData}  chartStats={chartCmpData}/></Suspense>
                </GridItem>
                <GridItem span={12}>
                    <Suspense fallback={<Loading />}>
                        <SigTable /></Suspense>
                </GridItem>
            </Grid>
        </Main>
    </React.Fragment>;
};

export default withRouter(Signatures);
