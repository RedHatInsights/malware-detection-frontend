import './Details.scss';

import { Grid, GridItem, Label } from '@patternfly/react-core';
import { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';
import { ExternalLinkAltIcon, ExclamationCircleIcon } from '@patternfly/react-icons';
import { Title } from '@patternfly/react-core/dist/esm/components/Title';
import Breadcrumb from '../../Components/Breadcrumb/Breadcrumb';
import { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';
import { GET_SIGNATURE_DETAILS_PAGE } from '../../operations/queries';
import Loading from '../../Components/Loading/Loading';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';
import React, { useEffect } from 'react';
import SigDetailsTable from '../../Components/SigDetailsTable/SigDetailsTable';
import { isBeta } from '../../Components/Common';
import messages from '../../Messages';
import { useIntl } from 'react-intl';
import { useParams } from 'react-router-dom';
import { useQuery } from '@apollo/client';
import { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';

const Details = () => {
    const intl = useIntl();
    const { id: sigId } = useParams();
    const breadcrumbs = [{
        name: intl.formatMessage(messages.malwareDetectionSignatures),
        to: `${isBeta()}/insights/malware`
    }, { name: sigId, to: '#' }];
    const { data, loading } = useQuery(GET_SIGNATURE_DETAILS_PAGE, {
        variables: { ruleName: sigId }
    });
    const sigDetailsData = data?.rulesList[0];
    const sigMetadata = sigDetailsData?.metadata;
    const isMatched = sigDetailsData?.affectedHosts?.totalCount > 0;
    const references = sigMetadata?.references || [];
    const xfti_references = sigMetadata?.xfti_references || [];
    const dataNotAvailable = intl.formatMessage(messages.dataNotAvailable);
    const detailBlock = (title, detail) => <React.Fragment>
        <p className='ins-l-detailBlockHeader'>{title}</p>
        <p>{detail || dataNotAvailable}</p>
    </React.Fragment>;
    const referenceLink = (referenceLink, referenceName) => <React.Fragment>
        <a className='ins-l-referenceLink' rel="noopener noreferrer" target="_blank" href={referenceLink}>{referenceName} <ExternalLinkAltIcon /></a>
    </React.Fragment>;
    const chrome = useChrome();
    useEffect(() => {
        chrome.updateDocumentTitle(`${sigId} - Signatures - Malware | Red Hat Insights`);
    }, [chrome, sigId]);

    const matchedSystemsCount = () => {
        return isMatched ? <React.Fragment>
            <ExclamationCircleIcon color='var(--pf-global--danger-color--100)' />&nbsp;
            <span style={{ color: 'var(--pf-global--danger-color--200)', fontWeight: 'bold' }}>
                {`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}
            </span>
        </React.Fragment>
            :
            <span>{`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}</span>;
    };

    return <React.Fragment>
        <PageHeader>
            <Breadcrumb items={breadcrumbs} />
            <Grid hasGutter>
                <GridItem md={12} sm={12}>
                    <PageHeaderTitle
                        title={
                            <span>
                                {sigId}&nbsp;
                                {sigMetadata?.threat_type &&
                                    <Label variant="outline" color="blue">{sigMetadata.threat_type}</Label>
                                }&nbsp;
                                {isMatched &&
                                    <Label variant="filled" color="red">Matched</Label>
                                }
                            </span>
                        }
                    />
                </GridItem>

                {loading ? <Loading /> :
                    <GridItem>
                        <Grid hasGutter>
                            <GridItem xl2={7} md={8} sm={12}>
                                <p className='ins-l-detailBlockHeader'>{intl.formatMessage(messages.description)}</p>
                                <Truncate
                                    text={sigMetadata?.description}
                                    length={200}
                                    inline
                                />
                            </GridItem>
                            <GridItem xl2={5} md={4} sm={12}>
                                {detailBlock(intl.formatMessage(messages.matchedSystems), matchedSystemsCount())}
                            </GridItem>
                            <GridItem lg={2} md={3} sm={12}>
                                {detailBlock(intl.formatMessage(messages.ruleCategory), sigMetadata?.rule_category)}
                            </GridItem>
                            <GridItem xl2={5} lg={6} md={5} sm={12}>
                                {detailBlock(intl.formatMessage(messages.ruleIntendedUsage), sigMetadata?.usage)}
                            </GridItem>
                            <GridItem xl2={5} md={4} sm={12}>
                                {detailBlock(intl.formatMessage(messages.lastmatch), sigDetailsData?.lastMatchDate ?
                                    <DateFormat date={new Date(sigDetailsData.lastMatchDate)} type="onlyDate" />
                                    : intl.formatMessage(messages.never))}
                            </GridItem>
                            <GridItem xl2={7} md={8} sm={12}>
                                {detailBlock(intl.formatMessage(messages.author), sigMetadata?.author)}
                            </GridItem>
                            {(references.length > 0 || xfti_references.length > 0) &&
                                <GridItem xl2={7} md={8} sm={12}>
                                    {xfti_references.length === 1 ?
                                        referenceLink(xfti_references[0], intl.formatMessage(messages.ruleAuthorReference))
                                        :
                                        xfti_references.map((ref, i) => referenceLink(ref,
                                            `${intl.formatMessage(messages.ruleAuthorReference)} [${i + 1}] `))}
                                    {references.length === 1 ?
                                        referenceLink(references[0], intl.formatMessage(messages.ruleBackgroundReference))
                                        :
                                        references.map((ref, i) => referenceLink(ref,
                                            `${intl.formatMessage(messages.ruleBackgroundReference)} [${i + 1}] `))}
                                </GridItem>
                            }
                        </Grid>
                    </GridItem>
                }
            </Grid>
        </PageHeader>
        <Main>
            <Title className='ins-l-tableBlockHeader' headingLevel='h2'>
                {intl.formatMessage(messages.affectedHosts)}
            </Title>
            <SigDetailsTable
                ruleName={sigId}
                isEmptyAccount={data?.hosts?.totalCount === 0}
                affectedCount={sigDetailsData?.affectedHosts?.totalCount}
            />
        </Main>
    </React.Fragment>;
};

export default Details;
