import './Details.scss';

import {
    Grid,
    GridItem,
    Label
} from '@patternfly/react-core';
import {
    Dropdown,
    DropdownItem,
    DropdownToggle
} from '@patternfly/react-core/deprecated';
import { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';
import { ExternalLinkAltIcon, ExclamationCircleIcon } from '@patternfly/react-icons';
import { Title } from '@patternfly/react-core/dist/esm/components/Title';
import Breadcrumb from '../../Components/Breadcrumb/Breadcrumb';
import { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';
import { GET_SIGNATURE_DETAILS_PAGE } from '../../operations/queries';
import { DISABLE_SIGNATURES, ENABLE_SIGNATURES } from '../../operations/mutations';
import Loading from '../../Components/Loading/Loading';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';
import React, { useEffect, useState } from 'react';
import SigDetailsTable from '../../Components/SigDetailsTable/SigDetailsTable';
import { isBeta, RBACPermissions } from '../../Components/Common';
import messages from '../../Messages';
import { useIntl } from 'react-intl';
import { useParams } from 'react-router-dom';
import { useQuery, useMutation } from '@apollo/client';
import { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';
import MessageState from '../../Components/MessageState/MessageState';
import ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';
import { Button } from '@patternfly/react-core/dist/esm/components/Button';
import { useDispatch } from 'react-redux';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';
import { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';

const Details = () => {
    const intl = useIntl();
    const dispatch = useDispatch();
    const notification = (data) => dispatch(addNotification(data));
    const hasWritePerms = usePermissions('malware-detection', RBACPermissions.write).hasAccess;
    const { id: sigName } = useParams();
    const breadcrumbs = [{
        name: intl.formatMessage(messages.malwareDetectionSignatures),
        to: `${isBeta()}/insights/malware`
    }, { name: sigName, to: '#' }];
    const sigDetailsQuery = { query: GET_SIGNATURE_DETAILS_PAGE, variables: { ruleName: sigName } };
    const { data, loading } = useQuery(sigDetailsQuery.query, { variables: sigDetailsQuery.variables });
    const sigDetailsData = data?.rulesList[0];
    const sigMetadata = sigDetailsData?.metadata;
    const isMatched = sigDetailsData?.affectedHosts?.totalCount > 0;
    const isDisabled = sigDetailsData?.isDisabled;
    const references = sigMetadata?.references || [];
    const xfti_references = sigMetadata?.xfti_references || [];
    const dataNotAvailable = intl.formatMessage(messages.dataNotAvailable);
    const chrome = useChrome();
    const [dropdownOpen, setDropdownOpen] = useState(false);
    const [showTable, setShowTable] = useState(false);
    const mutationVars = {
        variables: { input: { id: sigDetailsData?.id } },
        refetchQueries: [sigDetailsQuery],
        onCompleted: () => { setDropdownOpen(false); setShowTable(false); },
        onError: ({ networkError: error }) => {
            setDropdownOpen(false); setShowTable(true);
            const errorMsg = `${error.response.statusText} - ${error.bodyText}`;
            notification({ variant: 'danger', dismissable: true, title: intl.formatMessage(messages.error), description: `${errorMsg}` });
        }
    };
    const [enableSignature, { loading: enableSigLoading }] = useMutation(ENABLE_SIGNATURES, mutationVars);
    const [disableSignature, { loading: disableSigLoading }] = useMutation(DISABLE_SIGNATURES, mutationVars);

    const detailBlock = (title, detail) => (
        <React.Fragment>
            <p className='ins-l-detailBlockHeader'>{title}</p>
            <p>{detail || dataNotAvailable}</p>
        </React.Fragment>
    );

    const referenceLink = (referenceLink, referenceName) => (
        <a className='ins-l-referenceLink' rel="noopener noreferrer" target="_blank" href={referenceLink}>
            {referenceName} <ExternalLinkAltIcon />
        </a>
    );

    useEffect(() => {
        chrome.updateDocumentTitle(`${sigName} - Signatures - Malware | Red Hat Insights`);
    }, [chrome, sigName]);

    useEffect(() => {
        // only show the table when the data loads / changes
        setShowTable(true);
    }, [data]);

    const DisabledFromMalwareAnalysis = (
        <MessageState variant='large' icon={ExclamationTriangleIcon} iconClass='ins-l-custom-color'
            title={intl.formatMessage(messages.disabledFromAnalysis)}
            text={intl.formatMessage(messages.disabledFromAnalysisBody, {
                disabledBy: sigDetailsData?.disabledBy || 'Unknown',
                disabledAt: <DateFormat date={sigDetailsData?.disabledAt || new Date()} type="onlyDate" />
            })}>
            {hasWritePerms &&
                <Button variant="primary" isLoading={enableSigLoading} onClick={() => enableSignature(mutationVars)}>
                    {intl.formatMessage(enableSigLoading ? messages.enablingSignature : messages.enableSignatureForAnalysis)}
                </Button>
            }
        </MessageState>
    );

    const ActionsDropdown = (
        <Dropdown
            ouiaId='actions'
            toggle={
                <DropdownToggle onToggle={() => setDropdownOpen(!dropdownOpen)} isExpanded={dropdownOpen}>
                    {intl.formatMessage(messages.actions)}
                </DropdownToggle>
            }
            isOpen={dropdownOpen}
            dropdownItems={isDisabled ?
                [<DropdownItem key="action" ouiaId="enable" onClick={() => { enableSignature(mutationVars); setShowTable(false); }}>
                    {intl.formatMessage(enableSigLoading ? messages.enablingSignature : messages.enableSignatureForAnalysis)}
                </DropdownItem>]
                :
                [<DropdownItem key="action" ouiaId="disable" onClick={() => { disableSignature(mutationVars); setShowTable(false); }}>
                    {intl.formatMessage(disableSigLoading ? messages.disablingSignature : messages.disableSignatureFromAnalysis)}
                </DropdownItem>]
            }
            style={{ paddingBottom: 0 }}
        />
    );

    const matchedSystemsCount = () => {
        return isMatched ? <React.Fragment>
            <ExclamationCircleIcon color='var(--pf-global--danger-color--100)' />&nbsp;
            <span style={{ color: 'var(--pf-global--danger-color--200)', fontWeight: 'bold' }}>
                {`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}
            </span>
        </React.Fragment>
            :
            <span>{`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}</span>;
    };

    return <React.Fragment>
        <PageHeader>
            <Breadcrumb items={breadcrumbs} />
            <Grid hasGutter>
                <GridItem md={9} sm={9}>
                    <PageHeaderTitle
                        title={
                            <span>
                                {sigName}&nbsp;
                                {sigMetadata?.threat_type &&
                                    <Label variant="outline" color="blue">{sigMetadata.threat_type}</Label>
                                }&nbsp;
                                {(isDisabled || isMatched) &&
                                    <Label variant="filled" color="red">{isDisabled ? 'Disabled' : 'Matched'}</Label>}
                            </span>
                        }
                    />
                </GridItem>
                {hasWritePerms &&
                    <GridItem md={3} sm={3}>
                        {ActionsDropdown}
                    </GridItem>
                }

                {loading ? <Loading /> :
                    <GridItem>
                        <Grid hasGutter>
                            <GridItem xl2={7} md={8} sm={12}>
                                <p className='ins-l-detailBlockHeader'>{intl.formatMessage(messages.description)}</p>
                                <Truncate
                                    text={sigMetadata?.description}
                                    length={200}
                                    inline
                                />
                            </GridItem>
                            <GridItem xl2={5} md={4} sm={12}>
                                {detailBlock(intl.formatMessage(messages.matchedSystems),
                                    isDisabled ? intl.formatMessage(messages.notApplicable) : matchedSystemsCount())
                                }
                            </GridItem>
                            <GridItem lg={2} md={3} sm={12}>
                                {detailBlock(intl.formatMessage(messages.ruleCategory), sigMetadata?.rule_category)}
                            </GridItem>
                            <GridItem xl2={5} lg={6} md={5} sm={12}>
                                {detailBlock(intl.formatMessage(messages.ruleIntendedUsage), sigMetadata?.usage)}
                            </GridItem>
                            <GridItem xl2={5} md={4} sm={12}>
                                {detailBlock(intl.formatMessage(messages.lastmatch),
                                    isDisabled ? intl.formatMessage(messages.notApplicable) :
                                        sigDetailsData?.lastMatchDate ?
                                            <DateFormat date={new Date(sigDetailsData.lastMatchDate)} type="onlyDate" /> :
                                            intl.formatMessage(messages.never))
                                }
                            </GridItem>
                            <GridItem xl2={7} md={8} sm={12}>
                                {detailBlock(intl.formatMessage(messages.author), sigMetadata?.author)}
                            </GridItem>
                            {(references.length > 0 || xfti_references.length > 0) &&
                                <GridItem xl2={7} md={8} sm={12}>
                                    {xfti_references.length === 1 ?
                                        referenceLink(xfti_references[0], intl.formatMessage(messages.ruleAuthorReference))
                                        :
                                        xfti_references.map((ref, i) => referenceLink(ref,
                                            `${intl.formatMessage(messages.ruleAuthorReference)} [${i + 1}] `))}
                                    {references.length === 1 ?
                                        referenceLink(references[0], intl.formatMessage(messages.ruleBackgroundReference))
                                        :
                                        references.map((ref, i) => referenceLink(ref,
                                            `${intl.formatMessage(messages.ruleBackgroundReference)} [${i + 1}] `))}
                                </GridItem>
                            }
                        </Grid>
                    </GridItem>
                }
            </Grid>
        </PageHeader>
        <Main>
            {!showTable ? <Loading /> :
                isDisabled ? DisabledFromMalwareAnalysis :
                    <React.Fragment>
                        <Title className='ins-l-tableBlockHeader' headingLevel='h2'>
                            {intl.formatMessage(messages.affectedHosts)}
                        </Title>
                        <SigDetailsTable
                            ruleName={sigName}
                            isEmptyAccount={data?.hosts?.totalCount === 0}
                            affectedCount={sigDetailsData?.affectedHosts?.totalCount}
                        />
                    </React.Fragment>
            }
        </Main>
    </React.Fragment>;
};

export default Details;
