import React from 'react';
import { BrowserRouter as Router } from 'react-router-dom';
import { act, render, screen, waitFor, within } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { IntlProvider } from 'react-intl';
import { useApolloClient, useMutation } from '@apollo/client';
import '@testing-library/jest-dom';

import NewSigDetailsTable from '../NewSigDetailsTable';
import {
  mockSigDetailsTableData,
  mockSigHitsList,
} from './sigDetailsTable.fixtures';

jest.mock('@apollo/client');
jest.mock('@unleash/proxy-client-react', () => ({
  ...jest.requireActual('@unleash/proxy-client-react'),
  useFlag: () => true,
  useFlagsStatus: () => ({ flagsReady: true }),
}));

describe('SigDetailsTable', () => {
  beforeEach(() => {
    useApolloClient.mockReturnValue({
      query: async () => {
        return mockSigDetailsTableData;
      },
    });

    useMutation.mockReturnValue([
      jest.fn(async () => {
        return { data: { acknowledgeHits: { clientMutationId: '123' } } };
      }),
    ]);

    jest.mock(
      '@redhat-cloud-services/frontend-components-utilities/RBACHook',
      () => ({
        esModule: true,
        usePermissions: () => ({ hasAccess: true, isLoading: false }),
      })
    );
  });

  it('should render New matches column', async () => {
    render(
      <IntlProvider locale="en">
        <Router>
          <NewSigDetailsTable
            ruleName="bingo bango bongo"
            affectedCount={1}
            isEmptyAccount={false}
          />
        </Router>
      </IntlProvider>
    );

    expect(
      screen.getByRole('columnheader', {
        name: /new matches/i,
      })
    ).toBeVisible();
  });

  it('should render new match data on system row expansion', async () => {
    render(
      <IntlProvider locale="en">
        <Router>
          <NewSigDetailsTable
            ruleName="bingo bango bongo"
            affectedCount={1}
            isEmptyAccount={false}
          />
        </Router>
      </IntlProvider>
    );

    await waitFor(() => {
      expect(
        screen.getByRole('row', {
          name: /details i dont want to set the world on fire n\/a rhel 8\.0 04 jul 2024 1 1/i,
        })
      ).toBeVisible();
    });

    const row = screen.getByRole('row', {
      name: /details i dont want to set the world on fire n\/a rhel 8\.0 04 jul 2024 1 1/i,
    });

    act(() => {
      useApolloClient.mockReturnValue({
        query: async () => {
          return mockSigHitsList;
        },
      });
    });

    await userEvent.click(
      within(row).getByRole('button', {
        name: /details/i,
      })
    );

    await waitFor(() => {
      expect(screen.getByText('04 July 2024')).toBeVisible();
    });
  });

  it('should handle status filter', async () => {
    render(
      <IntlProvider locale="en">
        <Router>
          <NewSigDetailsTable
            ruleName="bingo bango bongo"
            affectedCount={1}
            isEmptyAccount={false}
          />
        </Router>
      </IntlProvider>
    );

    await userEvent.click(
      screen.getByRole('button', {
        name: /conditional filter toggle/i,
      })
    );

    await userEvent.click(
      screen.getByRole('menuitem', {
        name: /status/i,
      })
    );

    await userEvent.click(
      screen.getByRole('button', {
        name: /options menu/i,
      })
    );

    await userEvent.click(
      screen.getByRole('checkbox', {
        name: /not reviewed/i,
      })
    );

    await userEvent.click(
      screen.getByRole('button', {
        name: /options menu/i,
      })
    );

    expect(
      screen.getByRole('button', {
        name: /close not reviewed/i,
      })
    ).toBeVisible();

    await userEvent.click(
      screen.getByRole('button', {
        name: /close not reviewed/i,
      })
    );

    expect(
      screen.queryAllByRole('button', {
        name: /close not reviewed/i,
      })
    ).toHaveLength(0);
  });

  it('should render disabled actions column', async () => {
    jest.mock(
      '@redhat-cloud-services/frontend-components-utilities/RBACHook',
      () => ({
        esModule: true,
        usePermissions: () => ({ hasAccess: true, isLoading: false }),
      })
    );

    render(
      <IntlProvider locale="en">
        <Router>
          <NewSigDetailsTable
            ruleName="bingo bango bongo"
            affectedCount={1}
            isEmptyAccount={false}
          />
        </Router>
      </IntlProvider>
    );

    await waitFor(() => {
      expect(
        screen.getByRole('row', {
          name: /details i dont want to set the world on fire n\/a rhel 8\.0 04 jul 2024 1 1/i,
        })
      ).toBeVisible();
    });

    await userEvent.click(
      screen.getByRole('button', {
        name: /kebab dropdown toggle/i,
      })
    );

    expect(
      screen.getByRole('menuitem', {
        name: /delete matches/i,
      })
    ).toBeDisabled();
  });

  it('should render 0 new matches without BellIcon', async () => {
    render(
      <IntlProvider locale="en">
        <Router>
          <NewSigDetailsTable
            ruleName="bingo bango bongo"
            affectedCount={1}
            isEmptyAccount={false}
          />
        </Router>
      </IntlProvider>
    );

    await waitFor(() => {
      expect(
        screen.getByRole('row', {
          name: /details i dont want to set the world on fire n\/a rhel 8\.0 04 jul 2024 1 1/i,
        })
      ).toBeVisible();
    });

    act(() => {
      useApolloClient.mockReturnValue({
        query: async () => {
          return mockSigHitsList;
        },
      });
    });

    const bellIcon = screen.getAllByTestId('new-matches-bell-icon');

    expect(bellIcon).toHaveLength(1);
  });
});
