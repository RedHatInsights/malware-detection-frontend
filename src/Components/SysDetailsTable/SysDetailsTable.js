import { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination';
import React, { useEffect, useReducer } from 'react';
import {
    SortByDirection,
    Table,
    TableBody,
    TableHeader,
    cellWidth,
    expandable,
    sortable,
    info
} from '@patternfly/react-table/dist/esm/components/Table';

import CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';
import CodeEditor from '../CodeEditor/CodeEditor';
import { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';
import { expandMatchMetadata } from '../Common';
import { GET_SYSTEMS_DETAILS_TABLE_PAGE } from '../../operations/queries';
import Loading from '../Loading/Loading';
import MessageState from '../MessageState/MessageState';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';
import StatusLabel from '../StatusLabel/StatusLabel';
import messages from '../../Messages';
import propTypes from 'prop-types';
import { useIntl } from 'react-intl';
import { useQuery } from '@apollo/client';
import { Link } from 'react-router-dom';

const sortIndices = { 1: 'NAME', 2: 'LAST_STATUS', 3: 'LAST_MATCH_DATE', 4: 'MATCH_COUNT' };
const orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;

const tableReducer = (state, action) => {
    switch (action.type) {
        case 'setTableVars':
            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };
        case 'setSortBy':
            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };
        case 'setRows':
            return { ...state, rows: action.payload };
    }

    return state;
};

const SysDetailsTable = ({ systemId }) => {
    const intl = useIntl();
    const initialState = {
        tableVars: {
            limit: 10,
            offset: 0,
            orderBy: 'LAST_MATCH_DATE_ASC',
            ruleName: '',
            systemId
        },
        sortBy: {
            index: 2,
            direction: SortByDirection.asc
        },
        rows: []
    };
    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {
        ...initialState
    });
    const { data, loading, error } =
        useQuery(GET_SYSTEMS_DETAILS_TABLE_PAGE, { variables: tableVars });
    const columns = [
        { title: intl.formatMessage(messages.sigName), cellFormatters: [expandable], transforms: [sortable, cellWidth(55)] },
        { title: intl.formatMessage(messages.lastStatus), transforms: [cellWidth(10), sortable] },
        { title: intl.formatMessage(messages.matched), transforms: [sortable, cellWidth(10)] },
        { title: intl.formatMessage(messages.totalMatches),
            transforms: [
                sortable,
                cellWidth(15),
                info({
                    tooltip: intl.formatMessage(messages.totalMatchesNote)
                })
            ]
        }
    ];

    const page = tableVars.offset / tableVars.limit + 1;

    const filterConfigItems = [{
        label: intl.formatMessage(messages.sig).toLowerCase(),
        filterValues: {
            key: 'text-filter',
            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { ruleName: value, offset: 0 } }),
            value: tableVars.ruleName,
            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.sig).toLowerCase() })
        }
    }];

    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });

    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });

    const onSort = (e, index, direction) =>
        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });

    const onCollapse = (e, rowKey, isOpen) => {
        const collapseRows = [...rows];
        const host = collapseRows[rowKey + 1].hostData;

        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };
        collapseRows[rowKey + 1].cells =  [{
            title: <CodeEditor height='250px' code={`${host.matches.map((match, key) => `Match Source: ${match.source}
Offset:${match.stringOffset}
Match Data: ${match.stringData}
Match Identifier: ${match.stringIdentifier}
Match Scan Date: ${new Date(match.scanDate).toUTCString()}
${match.metadata ? expandMatchMetadata(JSON.parse(match.metadata.replaceAll('\n', ''))) : ''}
${host.matches.length > 1 && key !== host.matches.length - 1 ? `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
` : ''}`).join('')}`}
            isDownloadEnabled isCopyEnabled/> }];
        stateSet({ type: 'setRows', payload: collapseRows });
    };

    useEffect(() => {
        const rowBuilder = data => data?.host.affectedRulesList.flatMap((data, key) => ([{
            rowId: key,
            isOpen: false,
            cells: [
                { title: <Link to={`/signatures/${data.name}`}>{data.name}</Link> },
                { title: <StatusLabel isDisabled={data.isDisabled} hasMatch={data.lastStatus} displayMatch /> },
                { title: <DateFormat date={new Date(data.lastMatchDate)} type='onlyDate' /> },
                { title: <Link to={`/signatures/${data.name}`}>{data.matchCount?.toLocaleString()}</Link> }

            ]
        }, {
            parent: key * 2,
            hostData: data,
            fullWidth: true,
            cells: []
        }]
        ));

        !loading && stateSet({ type: 'setRows', payload: rowBuilder(data) });
    }, [intl, data, loading]);

    return <React.Fragment>
        <PrimaryToolbar
            pagination={{
                itemCount: data?.host?.affectedRules?.totalCount || 0,
                page,
                perPage: tableVars.limit,
                onSetPage(e, page) { onSetPage(e, page); },
                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },
                isCompact: true
            }}
            filterConfig={{ items: filterConfigItems }}
        />
        <Table className='sigTable' aria-label='Signature Details table'
            rows={rows} cells={columns} onCollapse={onCollapse}
            onSort={onSort}
            sortBy={data?.host?.affectedRules?.totalCount > 0 ? sortBy : undefined}
            isStickyHeader
        >
            <TableHeader />
            <TableBody />
        </Table>
        {loading ? <Loading type='table' /> :
            !error ?
                data?.host?.lastMatchDate ?
                    data?.host?.affectedRules?.totalCount === 0 ?
                        <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}
                            text={intl.formatMessage(messages.noResultsMatch)} /> : <React.Fragment />
                    :  <MessageState className='pf-c-card' variant='large' icon={CheckCircleIcon} iconClass='ins-l-success-color'
                        title={intl.formatMessage(messages.notMatched)}
                        text={intl.formatMessage(messages.notMatchedBody)} />
                : <MessageState className='pf-c-card' variant='large' title='Error' text='error' />}
        <Pagination
            itemCount={data?.host?.affectedRules?.totalCount || 0}
            widgetId='pagination-options-menu-bottom'
            perPage={tableVars.limit}
            page={page}
            variant={PaginationVariant.bottom}
            onSetPage={onSetPage}
            onPerPageSelect={onPerPageSelect}
        />
    </React.Fragment>;
};

SysDetailsTable.propTypes = { systemId: propTypes.string };

export default SysDetailsTable;
