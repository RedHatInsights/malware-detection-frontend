import React from 'react';
import { BrowserRouter as Router } from 'react-router-dom';
import { render, screen, waitFor, within } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { IntlProvider } from 'react-intl';
import { useQuery, useApolloClient } from '@apollo/client';
import '@testing-library/jest-dom';

import NewSysDetailsTable from '../NewSysDetailsTable';
import {
  mockSysHitsList,
  mockSysDetailsTableData,
} from './sysDetailsTable.fixtures';

jest.mock('@apollo/client');

describe('SysDetailsTable', () => {
  beforeEach(() => {
    useQuery.mockReturnValue(mockSysDetailsTableData);

    useApolloClient.mockReturnValue({
      query: async () => {
        return mockSysHitsList;
      },
    });
  });

  it('should render SysDetailsTable', async () => {
    render(
      <IntlProvider locale="en">
        <Router>
          <NewSysDetailsTable systemId={1234} />
        </Router>
      </IntlProvider>
    );

    expect(
      screen.getByRole('button', {
        name: /new matches/i,
      })
    ).toBeVisible();
  });

  it('should render new match data on signature row expansion', async () => {
    render(
      <IntlProvider locale="en">
        <Router>
          <NewSysDetailsTable systemId={1234} />
        </Router>
      </IntlProvider>
    );

    const row = screen.getByRole('row', {
      name: /details dalinar matched 27 jun 2024 1 1/i,
    });

    await userEvent.click(
      within(row).getByRole('button', {
        name: /details/i,
      })
    );

    await waitFor(() => {
      expect(screen.getByText('27-June-2024')).toBeVisible();
    });
  });

  it('should handle status filter', async () => {
    render(
      <IntlProvider locale="en">
        <Router>
          <NewSysDetailsTable systemId={1234} />
        </Router>
      </IntlProvider>
    );

    await userEvent.click(
      screen.getByRole('button', {
        name: /conditional filter toggle/i,
      })
    );

    await userEvent.click(
      screen.getByRole('menuitem', {
        name: /matched status/i,
      })
    );

    await userEvent.click(
      screen.getByRole('button', {
        name: /options menu/i,
      })
    );

    await userEvent.click(
      screen.getByRole('checkbox', {
        name: /not reviewed/i,
      })
    );

    await userEvent.click(
      screen.getByRole('button', {
        name: /options menu/i,
      })
    );

    expect(
      screen.getByRole('button', {
        name: /close not reviewed/i,
      })
    ).toBeVisible();

    await userEvent.click(
      screen.getByRole('button', {
        name: /close not reviewed/i,
      })
    );

    expect(
      screen.queryAllByRole('button', {
        name: /close not reviewed/i,
      })
    ).toHaveLength(0);
  });
});
