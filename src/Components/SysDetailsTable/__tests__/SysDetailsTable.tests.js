import React from 'react';
import { BrowserRouter as Router } from 'react-router-dom';
import { render, screen, waitFor, within } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { IntlProvider } from 'react-intl';
import { MockedProvider } from '@apollo/client/testing';
import '@testing-library/jest-dom';

import SysDetailsTable from '../SysDetailsTable';
import {
  mockSysHitsList,
  mockSysDetailsTableData,
  sysDetailsTableMockRequestDefault,
  sysDetailsTableMockRequestRuleNamei,
  sysDetailsTableMockRequestStatusNotReviewed,
} from './sysDetailsTable.fixtures';
import { GET_HITS_TABLE } from '../../../operations/queries';

describe('SysDetailsTable', () => {
  beforeEach(() => {
    jest.mock(
      '@redhat-cloud-services/frontend-components-utilities/RBACHook',
      () => ({
        esModule: true,
        usePermissions: () => ({ hasAccess: true, isLoading: false }),
      })
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should render SysDetailsTable', async () => {
    const mocks = [
      {
        request: sysDetailsTableMockRequestDefault,
        result: mockSysDetailsTableData,
      },
    ];

    render(
      <MockedProvider mocks={mocks} addTypename={false}>
        <IntlProvider locale="en">
          <Router>
            <SysDetailsTable systemId="ab43bf15-8f1d-473c-b64b-69311dab87f9" />
          </Router>
        </IntlProvider>
      </MockedProvider>
    );

    expect(
      screen.getByRole('columnheader', {
        name: /new matches/i,
      })
    ).toBeVisible();
  });

  it('should handle adding and removing status filter', async () => {
    const mocks = [
      {
        request: sysDetailsTableMockRequestDefault,
        result: mockSysDetailsTableData,
      },
      {
        request: sysDetailsTableMockRequestStatusNotReviewed,
        result: mockSysDetailsTableData,
      },
      {
        request: sysDetailsTableMockRequestDefault,
        result: mockSysDetailsTableData,
      },
    ];

    render(
      <MockedProvider mocks={mocks} addTypename={false}>
        <IntlProvider locale="en">
          <Router>
            <SysDetailsTable systemId="ab43bf15-8f1d-473c-b64b-69311dab87f9" />
          </Router>
        </IntlProvider>
      </MockedProvider>
    );

    await userEvent.click(
      screen.getByRole('button', {
        name: /conditional filter toggle/i,
      })
    );

    await userEvent.click(
      screen.getByRole('menuitem', {
        name: /matched status/i,
      })
    );

    await userEvent.click(
      screen.getByRole('button', {
        name: /options menu/i,
      })
    );

    await userEvent.click(
      screen.getByRole('checkbox', {
        name: /not reviewed/i,
      })
    );

    await userEvent.click(
      screen.getByRole('button', {
        name: /options menu/i,
      })
    );

    expect(
      screen.getByRole('button', {
        name: /close not reviewed/i,
      })
    ).toBeVisible();

    await userEvent.click(
      screen.getByRole('button', {
        name: /close not reviewed/i,
      })
    );

    expect(
      screen.queryAllByRole('button', {
        name: /close not reviewed/i,
      })
    ).toHaveLength(0);
  });

  it('should render new match data on signature row expansion', async () => {
    const mocks = [
      {
        request: sysDetailsTableMockRequestDefault,
        result: mockSysDetailsTableData,
      },
      {
        request: {
          query: GET_HITS_TABLE,
          variables: {
            hostId: 'ab43bf15-8f1d-473c-b64b-69311dab87f9',
            ruleName: 'Dalinar',
          },
        },
        result: mockSysHitsList,
      },
    ];

    render(
      <MockedProvider mocks={mocks} addTypename={false}>
        <IntlProvider locale="en">
          <Router>
            <SysDetailsTable systemId="ab43bf15-8f1d-473c-b64b-69311dab87f9" />
          </Router>
        </IntlProvider>
      </MockedProvider>
    );

    await waitFor(() => {
      expect(
        screen.getByRole('cell', {
          name: /dalinar/i,
        })
      ).toBeVisible();
    });

    const row = screen.getByRole('row', {
      name: /dalinar 27 jun 2024 1 1/i,
    });

    await userEvent.click(
      within(row).getByRole('button', {
        name: /details/i,
      })
    );

    await waitFor(() => {
      expect(screen.getByText('27 June 2024')).toBeVisible();
    });
  });

  it('should render disabled actions column', async () => {
    const mocks = [
      {
        request: sysDetailsTableMockRequestDefault,
        result: mockSysDetailsTableData,
      },
    ];

    jest.mock(
      '@redhat-cloud-services/frontend-components-utilities/RBACHook',
      () => ({
        esModule: true,
        usePermissions: () => ({ hasAccess: true, isLoading: false }),
      })
    );

    render(
      <MockedProvider mocks={mocks} addTypename={false}>
        <IntlProvider locale="en">
          <Router>
            <SysDetailsTable systemId="ab43bf15-8f1d-473c-b64b-69311dab87f9" />
          </Router>
        </IntlProvider>
      </MockedProvider>
    );

    await waitFor(() => {
      expect(
        screen.getByRole('cell', {
          name: /dalinar/i,
        })
      ).toBeVisible();
    });

    await userEvent.click(
      screen.getByRole('button', {
        name: /kebab dropdown toggle/i,
      })
    );

    expect(
      screen.getByRole('menuitem', {
        name: /delete matches/i,
      })
    ).toBeDisabled();
  });

  it('should render 0 new matches without BellIcon', async () => {
    const mocks = [
      {
        request: sysDetailsTableMockRequestDefault,
        result: mockSysDetailsTableData,
      },
      {
        request: {
          query: GET_HITS_TABLE,
          variables: {
            hostId: 'ab43bf15-8f1d-473c-b64b-69311dab87f9',
            ruleName: 'Dalinar',
          },
        },
        result: mockSysHitsList,
      },
    ];

    render(
      <MockedProvider mocks={mocks} addTypename={false}>
        <IntlProvider locale="en">
          <Router>
            <SysDetailsTable systemId="ab43bf15-8f1d-473c-b64b-69311dab87f9" />
          </Router>
        </IntlProvider>
      </MockedProvider>
    );

    await waitFor(() => {
      expect(
        screen.getByRole('cell', {
          name: /dalinar/i,
        })
      ).toBeVisible();
    });

    const bellIcon = screen.getAllByTestId('new-matches-bell-icon');

    expect(bellIcon).toHaveLength(2);
  });

  it('should apply text filter', async () => {
    const mocks = [
      {
        request: sysDetailsTableMockRequestDefault,
        result: mockSysDetailsTableData,
      },
      {
        request: sysDetailsTableMockRequestRuleNamei,
        result: mockSysDetailsTableData,
      },
    ];

    render(
      <MockedProvider mocks={mocks} addTypename={false}>
        <IntlProvider locale="en">
          <Router>
            <SysDetailsTable systemId="ab43bf15-8f1d-473c-b64b-69311dab87f9" />
          </Router>
        </IntlProvider>
      </MockedProvider>
    );

    await waitFor(() => {
      expect(
        screen.getByRole('cell', {
          name: /dalinar/i,
        })
      ).toBeVisible();
    });

    await userEvent.type(
      screen.getByRole('textbox', {
        name: /text input/i,
      }),
      'i'
    );
  });
});
