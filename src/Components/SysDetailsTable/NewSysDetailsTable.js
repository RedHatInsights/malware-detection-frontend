import React, { useEffect, useReducer, useState } from 'react';
import propTypes from 'prop-types';
import { useIntl } from 'react-intl';
import { useApolloClient } from '@apollo/client';
import { Pagination, PaginationVariant } from '@patternfly/react-core';
import {
  Table,
  TableBody,
  TableHeader,
} from '@patternfly/react-table/deprecated';
import { SortByDirection } from '@patternfly/react-table';
import { BellIcon, CheckCircleIcon, SearchIcon } from '@patternfly/react-icons';
import { SkeletonTable } from '@patternfly/react-component-groups';
import InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';
import TableToolbar from '@redhat-cloud-services/frontend-components/TableToolbar';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import CodeEditor from '../CodeEditor/CodeEditor';
import { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';
import { GET_SYSTEMS_DETAILS_TABLE_PAGE } from '../../operations/queries';
import MessageState from '../MessageState/MessageState';
import StatusLabel from '../StatusLabel/StatusLabel';
import messages from '../../Messages';
import { Icon } from '@patternfly/react-core';
import {
  generateCode,
  matchStatusFilterMap,
  addRemoveItemInArray,
} from '../helpers';
import { sysDetailsTableColumns } from './Columns';
import { NewMatchesTable } from '../TableComponents/NewMatchesTable';
import { useActionsConfig } from '../../Utilities/Hooks';
import { filterValues } from '../constants';
import { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';
import { RBACPermissions } from '../Common';

const sortIndices = {
  1: 'NAME',
  2: 'LAST_STATUS',
  3: 'LAST_MATCH_DATE',
  4: 'NEW_MATCH_COUNT',
  5: 'MATCH_COUNT',
};

const orderBy = ({ index, direction }) =>
  `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;

const tableReducer = (state, action) => {
  switch (action.type) {
    case 'setTableVars':
      return {
        ...state,
        tableVars:
          action.payload.sysMatchStatusFilter?.length === 0
            ? {
                ...state.tableVars,
                sysMatchStatusFilter: undefined,
              }
            : {
                ...state.tableVars,
                ...action.payload,
              },
      };
    case 'setSortBy':
      return {
        ...state,
        sortBy: action.payload,
        tableVars: { ...state.tableVars, ...action.tableVars },
      };
    case 'setRows':
      return { ...state, rows: action.payload };
  }

  return state;
};

const NewSysDetailsTable = ({ systemId }) => {
  const intl = useIntl();
  const client = useApolloClient();
  const { hasAccess: hasWriteAccess, isLoading: isWriteAccessLoading } =
    usePermissions('malware-detection', RBACPermissions.write);
  const [selectedMatches, setSelectedMatches] = useState([]);
  const [sysDetailsTableLoading, setSysDetailsTableLoading] = useState(false);
  const [sysDetailsTable, setSysDetailsTable] = useState({});
  const [expandedRows, setExpandedRows] = useState([]);

  const initialState = {
    tableVars: {
      limit: 10,
      offset: 0,
      orderBy: 'LAST_MATCH_DATE_ASC',
      ruleName: '',
      sysMatchStatusFilter: undefined,
      systemId,
    },
    sortBy: {
      index: 2,
      direction: SortByDirection.asc,
    },
    rows: [],
  };

  const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {
    ...initialState,
  });

  const fetchDetailsTable = async (shouldShowLoading) => {
    if (shouldShowLoading) {
      setSysDetailsTableLoading(true);
    }

    let response;
    try {
      response = await client.query({
        query: GET_SYSTEMS_DETAILS_TABLE_PAGE,
        fetchPolicy: 'no-cache',
        variables: tableVars,
      });
    } catch (error) {
      console.error('Error fetching data:', error);
    }

    setSysDetailsTable(response);
    setSysDetailsTableLoading(false);
  };

  useEffect(() => {
    fetchDetailsTable(true);
  }, [tableVars]);

  const page = tableVars.offset / tableVars.limit + 1;
  const columns = sysDetailsTableColumns(intl);

  const filterConfigItems = [
    {
      label: intl.formatMessage(messages.sig).toLowerCase(),
      type: 'text',
      filterValues: {
        key: 'text-filter',
        onChange: (e, value) =>
          stateSet({
            type: 'setTableVars',
            payload: { ruleName: value, offset: 0 },
          }),
        value: tableVars.ruleName,
        placeholder: intl.formatMessage(messages.filterBy, {
          field: intl.formatMessage(messages.sig).toLowerCase(),
        }),
      },
    },
    {
      label: intl.formatMessage(messages.sysMatchStatus).toLowerCase(),
      type: 'checkbox',
      filterValues: {
        key: 'sys-match-status-filter',
        onChange: (e, value) => {
          stateSet({
            type: 'setTableVars',
            payload: { sysMatchStatusFilter: value },
            offset: 0,
          });
        },
        items: filterValues,
        value: tableVars.sysMatchStatusFilter,
        placeholder: intl.formatMessage(messages.filterBy, {
          field: intl.formatMessage(messages.status).toLowerCase(),
        }),
      },
    },
  ];

  const onSetPage = (e, page) =>
    stateSet({
      type: 'setTableVars',
      payload: { offset: page * tableVars.limit - tableVars.limit },
    });

  const onPerPageSelect = (e, perPage) =>
    stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });

  const onSort = (e, index, direction) =>
    stateSet({
      type: 'setSortBy',
      payload: { index, direction },
      tableVars: { orderBy: orderBy({ index, direction }), offset: 0 },
    });

  const actions = useActionsConfig(
    isWriteAccessLoading,
    hasWriteAccess,
    selectedMatches,
    fetchDetailsTable,
    setSelectedMatches
  );

  const getExpandedCells = (host) => {
    return [
      {
        title: (
          <div>
            <NewMatchesTable
              fetchDetailsTable={fetchDetailsTable}
              hasWriteAccess={hasWriteAccess}
              hostId={systemId}
              isWriteAccessLoading={isWriteAccessLoading}
              matchStatusFilter={tableVars.sysMatchStatusFilter}
              ruleName={host.name}
              setSelectedMatches={setSelectedMatches}
            />
            <CodeEditor
              height="250px"
              code={generateCode(host)}
              isDownloadEnabled
              isCopyEnabled
            />
          </div>
        ),
      },
    ];
  };

  const onCollapse = async (e, rowKey, isOpen) => {
    const collapseRows = [...rows];
    const host = collapseRows[rowKey + 1].hostData;

    collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };

    setExpandedRows((prev) => {
      return addRemoveItemInArray(prev, rowKey);
    });

    collapseRows[rowKey + 1].cells = getExpandedCells(host);

    stateSet({ type: 'setRows', payload: collapseRows });
  };

  useEffect(() => {
    const rowBuilder = (data) =>
      data?.host.affectedRulesList.flatMap((data, key) => [
        {
          rowId: key,
          isOpen: expandedRows.includes(key * 2) ? true : false,
          cells: [
            {
              title: (
                <InsightsLink to={`/signatures/${data.name}`}>
                  {data.name}
                </InsightsLink>
              ),
            },
            {
              title: (
                <StatusLabel
                  isDisabled={data.isDisabled}
                  hasMatch={data.lastStatus}
                  displayMatch
                />
              ),
            },
            {
              title: (
                <DateFormat
                  date={new Date(data.lastMatchDate)}
                  type="onlyDate"
                />
              ),
            },
            {
              title:
                data.newMatchCount > 0 ? (
                  <span>
                    <Icon
                      data-testid="new-matches-bell-icon"
                      status="info"
                      style={{ marginRight: '8px' }}
                    >
                      <BellIcon />
                    </Icon>
                    {data.newMatchCount?.toLocaleString()}
                  </span>
                ) : (
                  <span className="pf-v5-u-disabled-color-200">
                    {data.newMatchCount?.toLocaleString()}
                  </span>
                ),
            },
            {
              title: data.matchCount?.toLocaleString(),
            },
          ],
        },
        {
          parent: key * 2,
          hostData: data,
          fullWidth: true,
          cells: expandedRows.includes(key * 2) ? getExpandedCells(data) : [],
        },
      ]);

    !sysDetailsTableLoading &&
      stateSet({ type: 'setRows', payload: rowBuilder(sysDetailsTable.data) });
  }, [sysDetailsTable.data, sysDetailsTableLoading, tableVars]);

  const buildFilterChips = () => {
    const chips = [];
    tableVars?.ruleName &&
      chips.push({
        category: intl.formatMessage(messages.signature),
        value: 'signature',
        chips: [{ name: tableVars.ruleName, value: tableVars.ruleName }],
      });
    tableVars?.sysMatchStatusFilter &&
      chips.push({
        category: intl.formatMessage(messages.status),
        value: 'status',
        chips: tableVars.sysMatchStatusFilter.map((status) => ({
          name: matchStatusFilterMap[status],
          value: status,
        })),
      });

    return chips;
  };

  const activeFiltersConfig = {
    deleteTitle: intl.formatMessage(messages.resetFilters),
    filters: buildFilterChips(),
    showDeleteButton:
      tableVars?.ruleName !== '' ||
      tableVars?.sysMatchStatusFilter !== undefined,
    onDelete: (event, itemsToRemove, isAll) => {
      if (isAll) {
        stateSet({
          type: 'setTableVars',
          payload: { ruleName: '', sysMatchStatusFilter: undefined, offset: 0 },
        });
        setExpandedRows([]);
      } else {
        itemsToRemove.map((item) => {
          if (item.value === 'signature') {
            stateSet({ type: 'setTableVars', payload: { ruleName: '' } });
          } else if (item.value === 'status') {
            const sysMatchStatusChips = tableVars.sysMatchStatusFilter.filter(
              (status) => status !== item.chips[0].value
            );
            const payload = {
              sysMatchStatusFilter: sysMatchStatusChips.length
                ? sysMatchStatusChips
                : undefined,
              offset: 0,
            };
            stateSet({ type: 'setTableVars', payload });
          }
        });
      }
    },
  };

  return (
    <React.Fragment>
      <PrimaryToolbar
        actionsConfig={{
          dropdownProps: { popperProps: { position: 'left' } },
          actions,
        }}
        pagination={{
          itemCount:
            sysDetailsTable?.data?.host?.affectedRules?.totalCount || 0,
          page,
          perPage: tableVars.limit,
          onSetPage(e, page) {
            onSetPage(e, page);
          },
          onPerPageSelect(e, perPage) {
            onPerPageSelect(e, perPage);
          },
          isCompact: true,
        }}
        filterConfig={{ items: filterConfigItems }}
        activeFiltersConfig={activeFiltersConfig}
      />
      {!sysDetailsTableLoading && (
        <Table
          className="sigTable"
          aria-label="Signature Details table"
          rows={rows}
          cells={columns}
          onCollapse={onCollapse}
          onSort={onSort}
          sortBy={
            sysDetailsTable?.data?.host?.affectedRules?.totalCount > 0
              ? sortBy
              : undefined
          }
          isStickyHeader
        >
          <TableHeader />
          <TableBody />
        </Table>
      )}

      {sysDetailsTableLoading ? (
        <SkeletonTable
          rows={tableVars.limit}
          columns={columns.map((column) => column.title)}
        />
      ) : !sysDetailsTable?.error ? (
        sysDetailsTable?.data?.host?.lastMatchDate ? (
          sysDetailsTable?.data?.host?.affectedRules?.totalCount === 0 ? (
            <MessageState
              className="pf-c-card"
              icon={SearchIcon}
              variant="large"
              title={intl.formatMessage(messages.noResults)}
              text={intl.formatMessage(messages.noResultsMatch)}
            />
          ) : (
            <React.Fragment />
          )
        ) : (
          <MessageState
            className="pf-c-card"
            variant="large"
            icon={CheckCircleIcon}
            iconClass="ins-l-success-color"
            title={intl.formatMessage(messages.notMatched)}
            text={intl.formatMessage(messages.notMatchedBody)}
          />
        )
      ) : (
        <MessageState
          className="pf-c-card"
          variant="large"
          title="Error"
          text="error"
        />
      )}
      <TableToolbar isFooter>
        <Pagination
          itemCount={
            sysDetailsTable?.data?.host?.affectedRules?.totalCount || 0
          }
          widgetId="pagination-options-menu-bottom"
          perPage={tableVars.limit}
          page={page}
          variant={PaginationVariant.bottom}
          onSetPage={onSetPage}
          onPerPageSelect={onPerPageSelect}
        />
      </TableToolbar>
    </React.Fragment>
  );
};

NewSysDetailsTable.propTypes = { systemId: propTypes.string };

export default NewSysDetailsTable;
