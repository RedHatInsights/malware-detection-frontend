import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';
import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';

import CodeEditor from '../CodeEditor';

jest.mock(
  '@redhat-cloud-services/frontend-components-utilities/helpers',
  () => ({
    ...jest.requireActual(
      '@redhat-cloud-services/frontend-components-utilities/helpers'
    ),
    downloadFile: jest.fn(),
  })
);

const writeText = jest.fn();

Object.assign(navigator, {
  clipboard: {
    writeText,
  },
});

describe('CodeEditor', () => {
  const code = `Match Source: /home/user/file.txt
  Offset: null
  Match Data: null
  Match Identifier: null
  Match Scan Date: Fri, 09 Aug 2024 16:40:39 GMT
  
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Match Source: /home/user/file.txt
  Offset: null
  Match Data: null
  Match Identifier: null
  Match Scan Date: Fri, 09 Aug 2024 16:40:44 GMT`;

  beforeEach(() => {
    navigator.clipboard.writeText.mockResolvedValue(undefined);
  });

  it('should render code content', async () => {
    render(<CodeEditor code={code} />);

    expect(
      screen.getByText(
        /match source: \/home\/user\/file\.txt offset: null match data: null match identifier: null match scan date: fri, 09 aug 2024 16:40:39 gmt ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ match source: \/home\/user\/file\.txt offset: null match data: null match identifier: null match scan date: fri, 09 aug 2024 16:40:44 gmt/i
      )
    ).toBeVisible();
  });

  it('should copy to clipboard', async () => {
    render(<CodeEditor code={code} />);

    await userEvent.click(
      screen.getByRole('button', {
        name: /copy to clipboard/i,
      })
    );

    expect(navigator.clipboard.writeText).toHaveBeenCalledWith(code);
  });

  it('should downloadFile', async () => {
    render(<CodeEditor code={code} />);

    await userEvent.click(
      screen.getByRole('button', {
        name: /download icon/i,
      })
    );

    expect(downloadFile).toHaveBeenCalled();
  });
});
