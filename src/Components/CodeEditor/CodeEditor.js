import { DownloadIcon } from '@patternfly/react-icons';
import {
  Button,
  ClipboardCopyButton,
  CodeBlock,
  CodeBlockAction,
  CodeBlockCode,
} from '@patternfly/react-core';
import PropTypes from 'prop-types';
import React from 'react';
import { formatDate } from '../SigTable/helper';
import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';

const CodeEditor = ({ code }) => {
  const [copied, setCopied] = React.useState(false);

  const clipboardCopyFunc = (event, text) => {
    navigator.clipboard.writeText(text.toString());
  };

  const onClick = (event, text) => {
    clipboardCopyFunc(event, text);
    setCopied(true);
  };

  const actions = (
    <>
      <CodeBlockAction>
        <ClipboardCopyButton
          id="code-copy-button"
          textId="code-content"
          aria-label="Copy to clipboard"
          onClick={(e) => onClick(e, code)}
          exitDelay={copied ? 1500 : 600}
          maxWidth="110px"
          variant="plain"
          onTooltipHidden={() => setCopied(false)}
        >
          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}
        </ClipboardCopyButton>
      </CodeBlockAction>
      <CodeBlockAction>
        <Button
          variant="plain"
          aria-label="Download icon"
          onClick={() =>
            downloadFile(
              code,
              `malware-detection_signature--${formatDate(Date.now())}`,
              'txt'
            )
          }
        >
          <DownloadIcon />
        </Button>
      </CodeBlockAction>
    </>
  );

  return (
    <CodeBlock
      style={{
        marginTop: 'var(--pf-v5-global--spacer--md)',
        marginBottom: 'var(--pf-v5-global--spacer--md)',
      }}
      actions={actions}
    >
      <CodeBlockCode>{code}</CodeBlockCode>
    </CodeBlock>
  );
};

CodeEditor.propTypes = {
  code: PropTypes.any,
  language: PropTypes.string,
  isReadOnly: PropTypes.bool,
  isCopyEnabled: PropTypes.bool,
  isDownloadEnabled: PropTypes.bool,
  height: PropTypes.string,
};

CodeEditor.defaultProps = { codeType: 'Code' };

export default CodeEditor;
