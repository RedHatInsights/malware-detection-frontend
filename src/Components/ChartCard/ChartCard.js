import './ChartCard.scss';

import { Card, CardBody } from '@patternfly/react-core/dist/esm/components/Card';
import { Chart, ChartBar, ChartVoronoiContainer } from '@patternfly/react-charts/dist/esm/components/';

import Loading from '../../Components/Loading/Loading';
import NumberDescription from '../NumberDescription/NumberDescription';
import React from 'react';
import { gqlProps } from '../Common';
import messages from '../../Messages';
import { useIntl } from 'react-intl';

const ChartCard = ({ sysStats, chartStats }) => {
    const intl = useIntl();
    const { data: sysStatsData, loading: sysStatsLoading } = sysStats;
    const { data: chartStatsData, loading: chartStatsLoading } = chartStats;
    const chartTransform = (data) => data.map(item => ({ name: 'Systems scanned', x: `${item.day.slice(5)}`, y: Number(item.hostScanCount) }));

    return <Card className='ins-l-card'>
        <CardBody>
            <React.Fragment>
                {sysStatsLoading ? <Loading /> :    <NumberDescription
                    data={sysStatsData?.hostScans?.totalCount}
                    dataSize='md'
                    description={intl.formatMessage(messages.analysisRunAcross,
                        {
                            hosts: sysStatsData?.hosts?.totalCount?.toLocaleString(),
                            matches: sysStatsData?.ruleStats?.matchedCount?.toLocaleString()
                        })}
                    layout='horizontal'
                />}
                {chartStatsLoading ? <Loading /> :
                    <div className='ins-l-chartContainer'>
                        <Chart
                            ariaDesc='Number of recent system scans'
                            ariaTitle='Number of recent system scans'
                            containerComponent={<ChartVoronoiContainer
                                labels={({ datum }) => `${datum.name} on ${datum.x}: ${datum.y} `} constrainToVisibleArea />}
                            domainPadding={{ x: [30, 25] }}
                            height={300}
                            width={550}
                        >
                            <ChartBar data={chartTransform(chartStatsData.timeSeriesStatsList)} />
                        </Chart>
                    </div>}
            </React.Fragment>

        </CardBody>
    </Card>;
};

ChartCard.propTypes = gqlProps;

export default ChartCard;
