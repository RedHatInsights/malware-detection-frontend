import React, { useEffect, useState } from 'react';
import { useApolloClient } from '@apollo/client';
import PropTypes from 'prop-types';
import { Table, Thead, Th, Tbody, Tr } from '@patternfly/react-table';
import { GET_HITS_TABLE } from '../../operations/queries';
import { SkeletonTable } from '@patternfly/react-component-groups';
import { NewMatchesTableRow } from './NewMatchesTableRow';

export const NewMatchesTable = ({
  fetchDetailsTable,
  hostId,
  ruleName,
  setSelectedMatches,
  matchStatusFilter,
}) => {
  const client = useApolloClient();
  const [areMatchesLoading, setAreMatchesLoading] = useState(false);
  const [hitlistData, setHitlistData] = useState([]);
  const columnNames = {
    blank: { name: '', width: 5 },
    scanDate: { name: 'Dates matched', width: 20 },
    matchedStatus: { name: 'Match status', width: 20 },
    note: { name: 'Note', width: 50 },
    actions: { name: '', width: 5 },
  };

  const fetchMatches = async () => {
    setAreMatchesLoading(true);
    try {
      const response = await client.query({
        query: GET_HITS_TABLE,
        fetchPolicy: 'no-cache',
        variables: {
          ruleName: ruleName,
          hostId: hostId,
          status: matchStatusFilter,
        },
      });

      console.log(response, 'response');

      setAreMatchesLoading(false);
      setHitlistData(response.data.hitsList);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  useEffect(() => {
    fetchMatches();
  }, []);

  return areMatchesLoading || !hitlistData?.length ? (
    <SkeletonTable rows={5} columns={Object.values(columnNames).length} />
  ) : (
    <Table aria-label="Simple table" variant="compact">
      <Thead style={{ borderBottom: '1px solid #d2d2d2' }}>
        <Tr>
          {Object.values(columnNames).map((column, idx) => (
            <Th key={`column-title-${column.name}-${idx}`} width={column.width}>
              {column.name}
            </Th>
          ))}
        </Tr>
      </Thead>
      <Tbody>
        {hitlistData?.map((data, idx) => (
          <NewMatchesTableRow
            key={`${data.id}-row`}
            columnNames={columnNames}
            data={data}
            fetchDetailsTable={fetchDetailsTable}
            fetchMatches={fetchMatches}
            hostId={hostId}
            rowIndex={idx}
            setSelectedMatches={setSelectedMatches}
          />
        ))}
      </Tbody>
    </Table>
  );
};

NewMatchesTable.propTypes = {
  fetchDetailsTable: PropTypes.func,
  hostId: PropTypes.string,
  ruleName: PropTypes.string,
  setSelectedMatches: PropTypes.func,
  matchStatusFilter: PropTypes.object,
};
