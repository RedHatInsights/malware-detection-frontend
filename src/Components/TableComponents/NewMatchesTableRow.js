import React from 'react';
import { Td } from '@patternfly/react-table';
import PropTypes from 'prop-types';
import { useCallback, useState } from 'react';
import { useVerifyInput } from '../useVerifyInput';
import { useMutation } from '@apollo/client';
import { EDIT_MATCH } from '../../operations/mutations';
import { TextInputGroupBasic } from './TextInputBasic';
import { DropdownBasic } from './DropdownBasic';

function formatDate(inputDate) {
  const date = new Date(inputDate);

  const day = date.getUTCDate().toString().padStart(2, '0');
  const month = date.toLocaleString('default', { month: 'long' });
  const year = date.getUTCFullYear();

  return `${day}-${month}-${year}`;
}

export const NewMatchesTableRow = ({ data, columnNames }) => {
  const [executeMutation] = useMutation(EDIT_MATCH);
  const [textValue, setTextValue] = useState(data.justification);
  const [dropdownValue, setDropdownValue] = useState(data.status);

  const handleDropdownChange = useCallback(
    (newDropdownValue, setDropdownValue) => {
      if (newDropdownValue !== null) {
        setDropdownValue(newDropdownValue);
        executeMutation({
          variables: {
            input: {
              sourceHitId: data.id,
              status: newDropdownValue,
              justification: textValue,
            },
          },
        });
      }
    },
    [executeMutation, data.id, textValue]
  );

  // Debounced execute mutation for text input changes
  const memoizedExecuteMutation = useCallback(() => {
    executeMutation({
      variables: {
        input: {
          sourceHitId: data.id,
          status: dropdownValue,
          justification: textValue,
        },
      },
    });
  }, [executeMutation, data.id, dropdownValue]);

  // Hook to perform verification on text input change
  const verifiedStatus = useVerifyInput(textValue, memoizedExecuteMutation);
  const isLoading = verifiedStatus === 'loading';

  return (
    <>
      <Td dataLabel={columnNames.scanDate}>{formatDate(data.scanDate)}</Td>
      <Td style={{ maxWidth: '100px' }}>
        <DropdownBasic
          dropdownValue={dropdownValue}
          onChange={handleDropdownChange}
          setDropdownValue={setDropdownValue}
        />
      </Td>
      <Td>
        <TextInputGroupBasic
          textValue={textValue}
          setTextValue={setTextValue}
          verifiedStatus={verifiedStatus}
          isLoading={isLoading}
        />
      </Td>
    </>
  );
};

NewMatchesTableRow.propTypes = {
  data: PropTypes.object,
  columnNames: PropTypes.object,
};
