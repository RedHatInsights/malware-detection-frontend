import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { Tr, Tbody, Td } from '@patternfly/react-table';
import { addRemoveItemInArray, generateCode } from '../helpers';
import CodeEditor from '../CodeEditor/CodeEditor';
import { NewMatchesTable } from './NewMatchesTable';

export const DetailsTableRow = ({
  columns,
  expandedRows,
  fetchDetailsTable,
  hasWriteAccess,
  host,
  hostId,
  isWriteAccessLoading,
  matchStatusFilter,
  rowIndex,
  ruleName,
  setExpandedRows,
  setSelectedMatches,
}) => {
  const [isExpanded, setIsExpanded] = useState(false);

  useEffect(() => {
    if (expandedRows.includes(rowIndex)) {
      setIsExpanded(true);
    }
  }, []);

  const expandRows = () => {
    setIsExpanded(!isExpanded);
    setExpandedRows((prev) => {
      return addRemoveItemInArray(prev, rowIndex);
    });
  };

  return (
    <Tbody>
      <Tr>
        <Td
          expand={{
            rowIndex,
            isExpanded,
            onToggle: () => expandRows(),
            expandId: rowIndex,
          }}
        />
        {columns.map((column, idx) => (
          <Td key={`${host.displayName}-${idx}`}>{column.renderFunc(host)}</Td>
        ))}
      </Tr>
      <Tr isExpanded={isExpanded}>
        <Td colSpan={7}>
          <NewMatchesTable
            fetchDetailsTable={fetchDetailsTable}
            hasWriteAccess={hasWriteAccess}
            hostId={hostId}
            isExpanded={isExpanded}
            isWriteAccessLoading={isWriteAccessLoading}
            matchStatusFilter={matchStatusFilter}
            ruleName={ruleName}
            setSelectedMatches={setSelectedMatches}
          />
        </Td>
      </Tr>
      <Tr isExpanded={isExpanded}>
        <Td colSpan={7}>
          <CodeEditor
            height="250px"
            code={generateCode(host)}
            isDownloadEnabled
            isCopyEnabled
          />
        </Td>
      </Tr>
    </Tbody>
  );
};

DetailsTableRow.propTypes = {
  columns: PropTypes.array,
  expandedRows: PropTypes.array,
  fetchDetailsTable: PropTypes.func,
  hasWriteAccess: PropTypes.bool,
  host: PropTypes.object,
  hostId: PropTypes.string,
  isWriteAccessLoading: PropTypes.bool,
  matchStatusFilter: PropTypes.array,
  rowIndex: PropTypes.string,
  ruleName: PropTypes.string,
  setExpandedRows: PropTypes.func,
  setSelectedMatches: PropTypes.func,
};
