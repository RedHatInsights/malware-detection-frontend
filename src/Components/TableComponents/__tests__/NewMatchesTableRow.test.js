import React from 'react';
import { render, fireEvent, waitFor, screen } from '@testing-library/react';
import { MockedProvider } from '@apollo/client/testing';
import { EDIT_MATCH } from '../../../operations/mutations';
import '@testing-library/jest-dom';
import { NewMatchesTableRow } from '../NewMatchesTableRow';

const mutationMock = [
  {
    request: {
      query: EDIT_MATCH,
      variables: {
        input: {
          sourceHitId: '1',
          status: 'IN_REVIEW', // Expected change
          justification: 'Initial justification',
        },
      },
    },
    result: {
      data: { acknowledgeHits: { clientMutationId: '123' } },
    },
  },
];

describe('NewMatchesTableRow Tests', () => {
  const mockData = {
    id: '1',
    justification: 'Initial justification',
    status: 'NOT_REVIEWED',
    scanDate: new Date(),
  };
  const columnNames = {
    scanDate: 'Match date',
    matchedStatus: 'Match status',
    note: 'Note',
  };

  it('renders correctly', async () => {
    render(
      <MockedProvider>
        <table>
          <tbody>
            <tr>
              <NewMatchesTableRow
                data={mockData}
                columnNames={columnNames}
                hasWriteAccess={true}
                isWriteAccessLoading={false}
              />
            </tr>
          </tbody>
        </table>
      </MockedProvider>
    );

    const inputs = await screen.findAllByDisplayValue(/initial justification/i);
    expect(inputs.length).toBe(2);
    expect(inputs[0]).toBeInTheDocument();

    expect(
      screen.getByRole('button', {
        name: /kebab toggle/i,
      })
    ).toBeVisible();

    expect(
      screen.getByRole('button', {
        name: /menutoggle/i,
      })
    ).toBeEnabled();

    expect(
      screen.getByRole('textbox', {
        name: /type to filter/i,
      })
    ).toBeEnabled();

    expect(
      screen.getByRole('checkbox', {
        name: /select all rows/i,
      })
    ).toBeEnabled();
  });

  it('handles dropdown change correctly', async () => {
    render(
      <MockedProvider mocks={mutationMock} addTypename={false}>
        <table>
          <tbody>
            <tr>
              <NewMatchesTableRow
                data={mockData}
                columnNames={columnNames}
                fetchDetailsTable={jest.fn()}
                hasWriteAccess={true}
                isWriteAccessLoading={false}
              />
            </tr>
          </tbody>
        </table>
      </MockedProvider>
    );

    expect(screen.getByTestId('new-match-bell-icon')).toBeVisible();

    const dropdownTrigger = screen.getByLabelText('MenuToggle');
    fireEvent.click(dropdownTrigger);

    const menuItem = screen.getByLabelText('In review');
    fireEvent.click(menuItem);

    // Wait for the mutation to be processed and for the UI to update
    await waitFor(() => {
      expect(screen.getByText(/In review/i)).toBeInTheDocument();
    });

    expect(screen.queryAllByTestId('new-match-bell-icon')).toHaveLength(0);
  });

  it('renders disabled correctly', async () => {
    render(
      <MockedProvider>
        <table>
          <tbody>
            <tr>
              <NewMatchesTableRow
                data={mockData}
                columnNames={columnNames}
                hasWriteAccess={false}
                isWriteAccessLoading={false}
              />
            </tr>
          </tbody>
        </table>
      </MockedProvider>
    );

    expect(
      screen.queryAllByRole('button', {
        name: /kebab toggle/i,
      })
    ).toHaveLength(0);

    expect(
      screen.getByRole('button', {
        name: /menutoggle/i,
      })
    ).toBeDisabled();

    expect(
      screen.getByRole('textbox', {
        name: '',
      })
    ).toBeDisabled();

    expect(
      screen.getByRole('checkbox', {
        name: /select all rows/i,
      })
    ).toBeDisabled();
  });

  it('renders match date cell with BellIcon correctly', async () => {
    render(
      <MockedProvider>
        <table>
          <tbody>
            <tr>
              <NewMatchesTableRow
                data={mockData}
                columnNames={columnNames}
                hasWriteAccess={true}
                isWriteAccessLoading={false}
              />
            </tr>
          </tbody>
        </table>
      </MockedProvider>
    );

    expect(screen.queryAllByTestId('new-match-bell-icon')).toHaveLength(1);
  });

  it('renders match date cell without BellIcon correctly', async () => {
    let oldMatch = {
      id: '2',
      justification: 'Initial justification',
      status: 'NOT_REVIEWED',
      scanDate: '2021-06-21T00:00:00.000Z',
    };

    render(
      <MockedProvider>
        <table>
          <tbody>
            <tr>
              <NewMatchesTableRow
                data={oldMatch}
                columnNames={columnNames}
                hasWriteAccess={true}
                isWriteAccessLoading={false}
              />
            </tr>
          </tbody>
        </table>
      </MockedProvider>
    );

    expect(screen.queryAllByTestId('new-match-bell-icon')).toHaveLength(0);
  });
});
