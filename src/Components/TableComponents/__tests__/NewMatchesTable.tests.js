import React from 'react';
import { BrowserRouter as Router } from 'react-router-dom';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { IntlProvider } from 'react-intl';
import { useApolloClient, useMutation } from '@apollo/client';
import '@testing-library/jest-dom';

import { NewMatchesTable } from '../NewMatchesTable';
import { mockSigHitsList } from '../../SigDetailsTable/__tests__/sigDetailsTable.fixtures';

jest.mock('@apollo/client');
jest.mock('@unleash/proxy-client-react', () => ({
  ...jest.requireActual('@unleash/proxy-client-react'),
  useFlag: () => true,
  useFlagsStatus: () => ({ flagsReady: true }),
}));

describe('NewMatchesTable', () => {
  let props;

  beforeEach(() => {
    useApolloClient.mockReturnValue({
      query: async () => {
        return mockSigHitsList;
      },
    });

    useMutation.mockReturnValue([
      jest.fn(async () => {
        return { data: { acknowledgeHits: { clientMutationId: '123' } } };
      }),
    ]);

    jest.mock(
      '@redhat-cloud-services/frontend-components-utilities/RBACHook',
      () => ({
        esModule: true,
        usePermissions: () => ({ hasAccess: true, isLoading: false }),
      })
    );

    props = {
      fetchDetailsTable: jest.fn(),
      hasWriteAccess: true,
      hostId: 1,
      isExpanded: true,
      isWriteAccessLoading: false,
      matchStatusFilter: {},
      ruleName: 'Starfield',
      setSelectedMatches: jest.fn(),
    };
  });

  it('should render New matches column', async () => {
    render(
      <IntlProvider locale="en">
        <Router>
          <NewMatchesTable {...props} />
        </Router>
      </IntlProvider>
    );

    await waitFor(() => {
      expect(
        screen.getByRole('button', {
          name: /menutoggle/i,
        })
      ).toBeVisible();
    });

    await userEvent.click(
      screen.getByRole('button', {
        name: /menutoggle/i,
      })
    );

    await userEvent.click(
      screen.getByRole('menuitem', {
        name: /in review/i,
      })
    );

    expect(props.fetchDetailsTable).toHaveBeenCalled();
  });
});
