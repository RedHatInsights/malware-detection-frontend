import { renderHook, waitFor } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';
import useMalwareSearchParams from '../useMalwareSearchParams';
import { sigDetailsTableSearchParams } from '../../constants';

describe('useMalwareSearchParams', () => {
  const stateSet = jest.fn();

  it('returns searchParams', () => {
    const wrapper = ({ children }) => (
      <MemoryRouter initialEntries={['/path?param1=value1']}>
        {children}
      </MemoryRouter>
    );

    const { result } = renderHook(
      () => useMalwareSearchParams(sigDetailsTableSearchParams, stateSet),
      { wrapper }
    );

    expect(result.current.searchParams.get('param1')).toEqual('value1');
  });

  it('sets searchParams and calls stateSet on handleSetSearchParams', async () => {
    const wrapper = ({ children }) => <MemoryRouter>{children}</MemoryRouter>;

    const { result } = renderHook(
      () => useMalwareSearchParams(sigDetailsTableSearchParams, stateSet),
      { wrapper }
    );

    expect(result.current.searchParams.toString()).toEqual('');
    await waitFor(() => {
      result.current.handleSetSearchParams([
        { name: 'displayName', value: 'i am groot' },
        { name: 'hostGroupFilter', value: [] },
        { name: 'status', value: ['IN_REVIEW', 'NOT_REVIEWED'] },
      ]);
    });

    expect(result.current.searchParams.get('displayName')).toEqual(
      'i am groot'
    );
    expect(result.current.searchParams.getAll('hostGroupFilter')).toEqual([]);
    expect(result.current.searchParams.getAll('status')).toEqual([
      'IN_REVIEW',
      'NOT_REVIEWED',
    ]);

    expect(stateSet).toHaveBeenCalledWith({
      type: 'setTableVars',
      payload: {
        displayName: 'i am groot',
        hostGroupFilter: undefined,
        status: ['IN_REVIEW', 'NOT_REVIEWED'],
        offset: 0,
      },
    });
  });
});
