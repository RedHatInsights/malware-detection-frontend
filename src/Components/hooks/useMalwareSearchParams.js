import { useCallback, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';

const useMalwareSearchParams = (malwareSearchParams, stateSet) => {
  const [searchParams, setSearchParams] = useSearchParams();

  const handleSetSearchParams = (newParams) => {
    let newSearchParams = {};
    newParams.forEach((param) => {
      param.value?.length
        ? (newSearchParams[param.name] = param.value)
        : undefined;
    });

    setSearchParams(newSearchParams);
  };

  const setSearchParamState = useCallback(
    (searchParams) => {
      let payload = {};

      malwareSearchParams.forEach((param) => {
        if (param.type === 'string') {
          payload[param.name] = searchParams.get(param.name) || '';
        } else if (param.type === 'array') {
          searchParams.getAll(param.name).length
            ? (payload[param.name] = searchParams.getAll(param.name))
            : (payload[param.name] = undefined);
        }
      });

      stateSet({
        type: 'setTableVars',
        payload: { ...payload, offset: 0 },
      });
    },
    [JSON.stringify(malwareSearchParams), stateSet]
  );

  useEffect(() => {
    setSearchParamState(searchParams);
  }, [searchParams, setSearchParamState]);

  return {
    searchParams,
    handleSetSearchParams,
    setSearchParams,
  };
};

export default useMalwareSearchParams;
