import { debounce } from 'lodash';
import { useState, useEffect, useRef, useCallback } from 'react';

export const useVerifyInput = (input, executeMutation) => {
  const [verifiedStatus, setVerifiedStatus] = useState('');
  const isMounted = useRef(false);
  const initialRender = useRef(true);

  const debouncedExecuteMutation = useCallback(
    debounce(async () => {
      try {
        await executeMutation();
        if (isMounted.current) {
          setVerifiedStatus('success');
        }
      } catch (error) {
        console.error('Error executing mutation:', error);
        if (isMounted.current) {
          setVerifiedStatus('error');
        }
      }
    }, 1000), // 1 second delay
    [executeMutation]
  );

  useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);

  useEffect(() => {
    if (initialRender.current) {
      initialRender.current = false;
      return;
    }

    if (!input) {
      return;
    }

    setVerifiedStatus('loading');
    debouncedExecuteMutation();

    return () => {
      debouncedExecuteMutation.cancel();
    };
  }, [input, debouncedExecuteMutation]);

  return verifiedStatus;
};
