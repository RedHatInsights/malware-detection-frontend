import {
    Tooltip,
    TooltipPosition
} from '@patternfly/react-core/dist/esm/components/Tooltip/';

import { Button } from '@patternfly/react-core/dist/esm/components/Button';
import OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';
import React from 'react';
import propTypes from 'prop-types';

const link = (desc, url = '#') => <Button isInline component='a' variant='link' href={url}>{desc}</Button>;

const gqlProps = {
    data: propTypes.object,
    loading: propTypes.bool,
    error: propTypes.object
};

const isBeta = () => window.location.pathname.split('/')[1] === 'beta' ? '/beta' : '';

/* eslint-disable max-len, padding-line-between-statements */
export const expandMatchMetadata = (md) => {
    let output = 'Source type: ' + md.source_type;
    if (md.source_type === 'file') {
        // scanned source was a file, parse its metadata (if any)
        if ('file_type' in md) {
            output += '\nFile Type: ' + md.file_type;
            output += '\nFile Mime Type: ' + md.mime_type;
            output += '\nFile MD5Sum: ' + md.md5sum;
            'line' in md && (output += '\nMatching Line Number: ' + md.line_number, output += '\nMatching Line: ' + decodeURIComponent(md.line));
        } else {
            output += ' (no metadata: Match Source is missing)';
        };
    } else {
        // scanned source was a process, parse its metadata (if any)
        if ('process_name' in md) {
            output += '\nProcess Name: ' + md.process_name;
        } else {
            output += ' (no metadata: Match Source is missing)';
        };
    };

    return output;
};
/* eslint-enable max-len, padding-line-between-statements */

const totalMatchesTitle = ({ tooltip, title }) => (<span>
    {title}
    <Tooltip
        key={title}
        position={TooltipPosition.right}
        content={<div>{tooltip}</div>}
    >
        <span aria-label="Action">
            {` `}<OutlinedQuestionCircleIcon />
        </span>
    </Tooltip>
</span>);

export { link, gqlProps, isBeta, totalMatchesTitle, expandMatchMetadata };
