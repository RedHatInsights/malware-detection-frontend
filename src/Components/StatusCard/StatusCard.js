import './StatusCard.scss';

import { Card, CardBody } from '@patternfly/react-core/dist/esm/components/Card/index';
import { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';
import { hasMalware, sigTableFilters } from '../../store/cache';

import CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';
import { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';
import ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';
import Loading from '../../Components/Loading/Loading';
import MessageState from '../MessageState/MessageState';
import React from 'react';
import { DocumentationLink, gqlProps } from '../Common';
import messages from '../../Messages';
import { useIntl } from 'react-intl';
import EmptyAccount from '../SharedComponents/EmptyAccount';

const StatusCard = ({ data: sigStatsData, loading: sigStatsLoading, noSigData }) => {
    const intl = useIntl();
    const matchedCount = sigStatsData?.ruleStats?.matchedCount || 0;
    const enabledCount = sigStatsData?.ruleStats?.enabledCount || 0;
    const disabledCount = sigStatsData?.ruleStats?.disabledCount || 0;

    const EmptyAccountState = (
        <GridItem span={!noSigData ? 8 : 12}>
            <EmptyAccount message={intl.formatMessage(messages.emptyAccountCardBody)} />
        </GridItem>
    );

    const setSigTableFilters = (event) => {
        // Sets the values for the radio/checkbox button items and the corresponding query variables for the API
        // eg: { hasMatch: [radio-value, query-variable], isDisabled: [[checkbox-value], query-variable ]
        let { hasMatch, isDisabled } = { hasMatch: ['true', true], isDisabled: [[], undefined] };  // id = matched
        if (event.currentTarget.id === 'enabled') {
            ({ hasMatch, isDisabled } = { hasMatch: ['all', undefined], isDisabled: [['false'], false] });
        } else if (event.currentTarget.id === 'disabled') {
            ({ hasMatch, isDisabled } = { hasMatch: ['all', undefined], isDisabled: [['true'], true] });
        }

        sigTableFilters({
            items: { hasMatch: hasMatch[0], isDisabled: isDisabled[0] },
            condition: { hasMatch: hasMatch[1], isDisabled: isDisabled[1] }
        });
    };

    const FilterResultState = (
        <GridItem span={!noSigData ? 8 : 12}>
            <MessageState className='' variant='large'
                icon={hasMalware() ? ExclamationCircleIcon : CheckCircleIcon}
                iconClass={hasMalware() ? 'ins-l-danger-color' : 'ins-l-success-color'}
                title={hasMalware() ?
                    intl.formatMessage(messages.activeFound) : intl.formatMessage(messages.noFound)}
                text={hasMalware() && intl.formatMessage(messages.hostsVulnerable)} >
                <span>{intl.formatMessage(messages.lastCheck)} </span>
                {sigStatsData?.hostScans?.nodes[0]
                    ? <DateFormat date={new Date(sigStatsData?.hostScans?.nodes[0].createdAt)} type='onlyDate' /> :
                    intl.formatMessage(messages.noAnalysisRun)}
                <p className='pf-u-pt-sm'><DocumentationLink>{intl.formatMessage(messages.learnMore)}</DocumentationLink></p>
            </MessageState>
        </GridItem>
    );

    return <Card className='ins-l-card'>
        <CardBody>
            <Grid>
                {
                    sigStatsLoading ? <Loading /> : (sigStatsData.hosts?.totalCount === 0 && EmptyAccountState || FilterResultState)
                }
                {!noSigData && <React.Fragment>
                    <GridItem span={1}
                        className='pf-c-divider pf-m-vertical pf-m-inset-md pf-m-inset-none-on-md pf-m-inset-sm-on-lg pf-m-inset-xs-on-xl' />
                    {sigStatsLoading ? <Loading />
                        : <GridItem className='ins-l-sigStatCard' span={3}>
                            <GridItem className='ins-l-sigStat' span={12}>
                                <strong>{matchedCount}</strong>
                                <br />
                                <a className='ins-l-sigStatNum' id="matched" onClick={setSigTableFilters}>
                                    <p>{intl.formatMessage(messages.matchedSignaturesCount, { matchedCount })}</p>
                                </a>
                            </GridItem>
                            <GridItem className='ins-l-sigStat' span={12}>
                                <strong>{enabledCount}</strong>
                                <br />
                                <a className='ins-l-sigStatNum' id="enabled" onClick={setSigTableFilters}>
                                    <p>{intl.formatMessage(messages.enabledSignaturesCount, { enabledCount })}</p>
                                </a>
                            </GridItem>
                            <GridItem className='ins-l-sigStat' span={12}>
                                <strong>{disabledCount}</strong>
                                <br />
                                <a className='ins-l-sigStatNum' id="disabled" onClick={setSigTableFilters}>
                                    <p>{intl.formatMessage(messages.disabledSignaturesCount, { disabledCount })}</p>
                                </a>
                            </GridItem>
                        </GridItem>
                    }
                </React.Fragment>}
            </Grid>
        </CardBody>
    </Card >;
};

StatusCard.propTypes = gqlProps;

export default StatusCard;
