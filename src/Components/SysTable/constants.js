import React from 'react';
import { createIntl, createIntlCache } from 'react-intl';
import { entitiesReducer } from '../../store/index';
import {
    cellWidth,
    info
} from '@patternfly/react-table/dist/esm/components/Table/index';
import messages from '../../Messages';
import StatusLabel from '../StatusLabel/StatusLabel';
import { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';
import { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';
import isEmpty from 'lodash/isEmpty';
import { InsightsLink } from '@redhat-cloud-services/frontend-components/InsightsLink';

const cache = createIntlCache();
const locale = navigator.language.slice(0, 2);

export const intl = createIntl({
    locale
}, cache);

export const intlSettings = { locale };
export const defaultOnLoad =
  (columns, getRegistry) =>
      ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>
          getRegistry().register({
              ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns),
                  {
                      page: 1,
                      perPage: 10,
                      sortBy: {
                          key: 'totalMatches',
                          direction: 'desc'
                      }
                  })
          });

export const columns = [
    {
        title: intl.formatMessage(messages.name),
        transforms: [cellWidth(30)],
        key: 'displayName',
        sortBy: ['DISPLAY_NAME'],
        renderFunc: (displayName, id) => <InsightsLink to={`/systems/${id}`}>{displayName}</InsightsLink>
    },
    {
        title: 'Group',
        key: 'groups',
        sortBy: ['GROUP_NAME'],
        requiresDefault: true
    },
    {
        title: 'Tags',
        key: 'tags',
        props: { width: 10, isStatic: true }
    },
    {
        title: 'OS',
        key: 'osVersion',
        sortBy: ['OS_VERSION'],
        props: { width: 10 },
        renderFunc: (osVersion) => osVersion ? `RHEL ${osVersion}` : intl.formatMessage(messages.dataNotAvailable)
    },
    {
        title: intl.formatMessage(messages.lastStatus),
        transforms: [cellWidth(10)],
        key: 'hasMatch',
        sortBy: ['HAS_MATCH'],
        renderFunc: (hasMatch, _, { isDisabled }) => <StatusLabel isDisabled={isDisabled} hasMatch={hasMatch} displayMatch />
    },
    {
        title: intl.formatMessage(messages.lastMatched),
        transforms: [cellWidth(10)],
        key: 'lastMatchDate',
        sortBy: ['LAST_MATCH_DATE'],
        renderFunc: (lastMatchDate) =>
            lastMatchDate ?
                <Tooltip content={<DateFormat date={new Date(lastMatchDate)} type='exact' />}>
                    <span><DateFormat date={new Date(lastMatchDate)} /></span>
                </Tooltip>
                : <Tooltip content={intl.formatMessage(messages.noHostHas)}>
                    <span>{intl.formatMessage(messages.never)}</span>
                </Tooltip>
    },
    {
        title: intl.formatMessage(messages.totalMatches),
        transforms: [
            cellWidth(10),
            info({
                tooltip: intl.formatMessage(messages.totalMatchesNote)
            })
        ],
        key: 'totalMatches',
        sortBy: ['TOTAL_MATCHES'],
        renderFunc: (totalMatches, _, { id }) => <InsightsLink to={`/systems/${id}`}>{totalMatches?.toLocaleString()}</InsightsLink>
    },
    {
        title: intl.formatMessage(messages.lastScan),
        key: 'lastScanDate',
        sortBy: ['LAST_SCAN_DATE'],
        renderFunc: (lastScanDate) =>
            <Tooltip content={<DateFormat date={new Date(lastScanDate)} type='exact' />}>
                <span><DateFormat date={new Date(lastScanDate)} /></span>
            </Tooltip>

    }
];

export const mergedColumns = (defaultColumns) => {
    return columns.map((column) => {
        const isStringCol = typeof column === 'string';

        const defaultColumn = defaultColumns.find(
            (defaultCol) => defaultCol.key === column.key
        );
        //this step is necessary so we could compare the default columns from column object at the top of the file
        //with the columns that come from the inventory, so if inventory hide a column behind feature flag
        //it will not appear when the flag is turned off
        return column.requiresDefault && defaultColumn === undefined ?
            undefined : {
                ...(isStringCol ? { key: column } : column),
                ...defaultColumn,
                ...(column.key === 'groups' ?
                    {
                        renderFunc: (groups) => isEmpty(groups) ?
                            'N/A'
                            :
                            <InsightsLink to={`/groups/${groups[0].id}`} app="inventory">
                                {groups[0].name}
                            </InsightsLink>
                    }
                    : {}),
                props: {
                    ...defaultColumn?.props,
                    ...column?.props
                }
            };
    }).filter(Boolean);
};

export const appendDirection = (attributes, direction) =>
    attributes?.map((attribute) => `${attribute}_${direction}`);

export const findColumnByKey = (key) =>
    (columns || []).find((column) => column.key === key);

export const matchOptions = [
    { label: 'All', value: 'All' },
    { label: 'Matched', value: true },
    { label: 'Not Matched', value: false }
];
