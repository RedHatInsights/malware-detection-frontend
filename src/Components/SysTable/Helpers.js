import { matchOptions } from './constants';

export const buildFilterChips = (filters) => {
  let filterConfig = [];
  const buildChips = () => {
    {
      const match = matchOptions.find(
        ({ value }) => value === filters.filterValues.value
      );
      const results = match
        ? [
            {
              name: match.label,
              value: filters.filterValues.value,
              id: match.value,
            },
          ]
        : [];
      return results;
    }
  };

  const processFilters = () => {
    filterConfig = filterConfig.concat([
      {
        category: 'Status',
        id: 'Status',
        chips: buildChips(),
      },
    ]);
  };

  filters && processFilters();

  return filterConfig;
};

export const buildActiveFiltersConfig = (filter, setStateValue) => ({
  filters: buildFilterChips(filter),
  onDelete: (event, itemsToRemove, isAll) => {
    if (isAll) {
      setStateValue(true);
    } else {
      itemsToRemove.map((item) => {
        item.category === 'Status' &&
          setStateValue(item.chips[0].value === 'All' ? true : 'All');
      });
    }
  },
  showDeleteButton: true,
});

const buildOsApiFilter = (osFilter) =>
  Object.entries(osFilter).reduce(
    (acc, [, osGroupValues]) =>
      [
        ...acc,
        ...Object.entries(osGroupValues)
          .filter(([, value]) => value === true)
          .map(([key]) => {
            const keyParts = key.split('-');
            return keyParts[2];
          })
          .filter((v) => !!v),
      ].sort(),
    []
  );

const buildTagsApiFilter = (tagFilters) =>
  tagFilters.flatMap((tagFilter) =>
    tagFilter.values.map((tag) => ({
      namespace: tagFilter.key,
      key: tag.tagKey,
      value: tag.value,
    }))
  );

export const buildApiFilters = (filters = {}) => {
  const {
    tagFilters,
    osFilter: osFilterValue,
    hostGroupFilter,
    ...otherFilters
  } = filters;
  const osFilter = buildOsApiFilter(osFilterValue || {});
  const tagsApiFilter = buildTagsApiFilter(tagFilters || []);

  return {
    ...otherFilters,
    ...(osFilter?.length ? { osFilter } : {}),
    ...(hostGroupFilter?.length ? { hostGroupFilter } : {}),
    ...(tagsApiFilter?.length ? { tags: tagsApiFilter } : {}),
  };
};
