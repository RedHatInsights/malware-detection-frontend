/* eslint-disable no-unused-vars */
import './SysTable.scss';

import React, { useContext, useEffect, useCallback, useRef } from 'react';

import {
    useFetchSystems,
    buildApiFilters
} from './hooks';
import { defaultOnLoad, columns, mergedColumns, appendDirection, findColumnByKey } from './constants';

import { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';
import { GET_SYSTEM_TABLE } from '../../operations/queries';
import MessageState from '../MessageState/MessageState';
import { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';
import { Spinner } from '@patternfly/react-core';
import { gqlProps } from '../Common';
import messages from '../../Messages';
import { useIntl } from 'react-intl';
import { RegistryContext } from '../../store';
import { useDispatch } from 'react-redux';

const SysTable = () => {
    const inventory = useRef(null);
    const intl = useIntl();
    const { getRegistry } = useContext(RegistryContext);
    const dispatch = useDispatch();

    useEffect(() => {
        dispatch({ type: 'INVENTORY_INIT' });
        dispatch({ type: 'RESET_PAGE' });
        inventory?.current?.onRefreshData();
    }, [dispatch]);

    const fetchSystems = useCallback(useFetchSystems({
        query: GET_SYSTEM_TABLE
    }));

    const mergedColumns = (defaultColumns) =>
        columns.map((column) => {
            const isStringCol = typeof column === 'string';
            const key = isStringCol ? column : column.key;
            const defaultColumn = defaultColumns.find(
                (defaultCol) => defaultCol.key === key
            );
            return {
                ...defaultColumn,
                ...(isStringCol ? { key: column } : column),
                props: {
                    ...defaultColumn?.props,
                    ...column?.props
                }
            };
        });

    // useEffect(() => {
    //     const rowBuilder = data => data?.hostsList?.flatMap((data, key) => ({
    //         rowId: key,
    //         cells: [
    //             { title: <Link to={`/systems/${data.displayName}`}>{data.displayName}</Link> },
    //             { title: <StatusLabel isDisabled={data.isDisabled} hasMatch={data.hasMatch} displayMatch /> },
    //             {
    //                 title: data.lastMatchDate ?
    //                     <Tooltip content={<DateFormat date={new Date(data.lastMatchDate)} type='exact' />}>
    //                         <span><DateFormat date={new Date(data.lastMatchDate)} type='onlyDate' /></span>
    //                     </Tooltip>
    //                     : <Tooltip content={intl.formatMessage(messages.noHostHas)}>
    //                         <span>{intl.formatMessage(messages.never)}</span>
    //                     </Tooltip>
    //             },
    //             { title: <Link to={`/systems/${data.displayName}`}>{data.totalMatches?.toLocaleString()}</Link> },
    //             { title: <Tooltip content={<DateFormat date={new Date(data.lastScanDate)} type='exact' />}>
    //                 <span><DateFormat date={new Date(data.lastScanDate)} /></span>
    //             </Tooltip> }

    //         ]
    //     }));

    const appendDirection = (attributes, direction) =>
        attributes.map((attribute) => `${attribute}_${direction}`);

    const findColumnByKey = (key) =>
        (columns || []).find((column) => column.key === key);

    return <React.Fragment>
        <InventoryTable
            isFullView
            autoRefresh
            initialLoading
            hideFilters={{ all: true, name: false, tags: true }}
            columns={mergedColumns}
            // TODO: enable when tag filtering is ready on BE
            // showTags
            ref={inventory}
            fallback={<Spinner />}
            onLoad={defaultOnLoad(columns, getRegistry)}
            getEntities={async (
                _ids,
                { page = 1, per_page: perPage, orderBy, orderDirection, filters }
            ) => {
                const sortableColumn = findColumnByKey(orderBy);
                const sortBy = appendDirection(sortableColumn?.sortBy, orderDirection);
                const filterForApi = buildApiFilters(filters);
                const limit = perPage;
                const offset = page * perPage - perPage;

                const fetchedEntities = await fetchSystems(limit, offset, {
                    ...filterForApi,
                    orderBy: sortBy
                });
                const {
                    entities,
                    meta: { totalCount }
                } = fetchedEntities || {};

                return {
                    results: entities,
                    orderBy,
                    orderDirection,
                    total: totalCount
                };
            }}
            tableProps={{
                canSelectAll: false,
                className: 'sysTable',
                isStickyHeader: true
            }}
            noSystemsTable={<MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}
                text={intl.formatMessage(messages.noResultsMatch)} />}
        />
    </React.Fragment>;
};

SysTable.propTypes = gqlProps;

export default SysTable;
