import React, {
  useContext,
  useEffect,
  useCallback,
  useRef,
  useState,
} from 'react';
import { useIntl } from 'react-intl';
import { useDispatch } from 'react-redux';
import { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';
import { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';
import { Alert } from '@patternfly/react-core';
import { GET_SYSTEM_TABLE } from '../../operations/queries';
import MessageState from '../MessageState/MessageState';
import { gqlProps } from '../Common';
import messages from '../../Messages';
import { RegistryContext } from '../../store';
import { globalFilters } from '../../store/cache';
import matchFilter from './matchFilter';
import { buildActiveFiltersConfig } from './Helpers';
import { useFetchSystems, buildApiFilters } from './hooks';
import {
  defaultOnLoad,
  columns,
  mergedColumns,
  appendDirection,
  findColumnByKey,
} from './constants';
import './SysTable.scss';

const SysTable = () => {
  const inventory = useRef(null);
  const intl = useIntl();
  const { getRegistry } = useContext(RegistryContext);
  const dispatch = useDispatch();
  let [matchStateValue, setStateValue] = useState(true);
  useEffect(() => {
    dispatch({ type: 'INVENTORY_INIT' });
    dispatch({ type: 'RESET_PAGE' });
    inventory?.current?.onRefreshData();
  }, [dispatch]);

  const fetchSystems = useCallback(
    useFetchSystems({
      query: GET_SYSTEM_TABLE,
    }),
    []
  );

  const { value } = matchFilter(matchStateValue, setStateValue).filterValues;

  return (
    <React.Fragment>
      <Alert
        isInline
        variant="info"
        ouiaId="SystemsListIsDifferentAlert"
        title={intl.formatMessage(messages.systemsListIsDifferent)}
      />
      <InventoryTable
        isFullView
        autoRefresh
        initialLoading
        hideFilters={{
          all: true,
          name: false,
          tags: false,
          operatingSystem: false,
          hostGroupFilter: false,
        }}
        columns={mergedColumns}
        hasCheckbox={false}
        showTags
        ref={inventory}
        onLoad={defaultOnLoad(columns, getRegistry)}
        getEntities={async (
          _ids,
          { page = 1, per_page: perPage, orderBy, orderDirection, filters }
        ) => {
          value === 'All'
            ? delete filters.hasMatch
            : (filters = { ...filters, hasMatch: value });
          const sortableColumn = findColumnByKey(orderBy);
          const sortBy = appendDirection(
            sortableColumn?.sortBy,
            orderDirection
          );
          const filterForApi = buildApiFilters(filters);
          const limit = perPage;
          const offset = page * perPage - perPage;

          const fetchedEntities = await fetchSystems(limit, offset, {
            ...filterForApi,
            orderBy: sortBy,
          });
          const {
            entities,
            meta: { totalCount },
          } = fetchedEntities || {};

          return {
            // we need "dipslay_name" in TagModal for title, hence this mapping
            results: entities.map((entity) => ({
              ...entity,
              display_name: entity.displayName,
            })),
            orderBy,
            orderDirection,
            total: totalCount,
          };
        }}
        tableProps={{
          canSelectAll: false,
          className: 'sysTable',
          isStickyHeader: true,
        }}
        noSystemsTable={
          <MessageState
            className="pf-c-card"
            icon={SearchIcon}
            variant="large"
            title={intl.formatMessage(messages.noResults)}
            text={intl.formatMessage(messages.noResultsMatch)}
          />
        }
        customFilters={{
          malwareParams: {
            ...globalFilters(),
          },
          params: matchStateValue,
        }}
        filterConfig={{
          items: [matchFilter(matchStateValue, setStateValue)],
        }}
        activeFiltersConfig={buildActiveFiltersConfig(
          matchFilter(matchStateValue, setStateValue),
          setStateValue
        )}
      />
    </React.Fragment>
  );
};

SysTable.propTypes = gqlProps;

export default SysTable;
