import { buildApiFilters } from './Helpers';

describe('buildApiFilters', function () {
  it("doesn't raise errors when an empty set of filters is passed", () => {
    expect(buildApiFilters()).toEqual({});
  });

  it("doesn't raise errors when an empty set of filters is passed", () => {
    const randomFilter = { randomOtherFilter: { key: 'value' } };
    expect(buildApiFilters(randomFilter)).toEqual(randomFilter);
  });

  it('returns a proper api osFilter when passed', () => {
    expect(
      buildApiFilters({
        osFilter: {
          'RHEL-9': {
            'RHEL-9': true,
            'RHEL-9-9.5': true,
            'RHEL-9-9.4': true,
            'RHEL-9-9.3': true,
            'RHEL-9-9.2': true,
            'RHEL-9-9.1': true,
            'RHEL-9-9.0': true,
          },
          'RHEL-8': {
            'RHEL-8': null,
            'RHEL-8-8.4': true,
            'RHEL-8-8.0': true,
          },
        },
      }).osFilter
    ).toEqual(['8.0', '8.4', '9.5', '9.4', '9.3', '9.2', '9.1', '9.0'].sort());
  });

  it('should only return a hostgroup filter if passed', () => {
    const filter = [
      'ui_group_test_141e411b-2b88-4284-9404-822d0b6296fa',
      'ui_group_test_274d71ca-9c5c-4fd6-8484-293415fb8149',
    ];
    expect(
      buildApiFilters({
        hostGroupFilter: filter,
      }).hostGroupFilter
    ).toEqual(filter);

    expect(
      buildApiFilters({
        hostGroupFilter: [],
      }).hostGroupFilter
    ).toBe(undefined);
  });

  it('should only return a hostgroup filter if passed', () => {
    const filter = [
      {
        type: 'tags',
        key: 'ADbMFCrUQ',
        category: 'ADbMFCrUQ',
        values: [
          {
            key: 'iDUudUEyX=DdGGgXQKh',
            tagKey: 'iDUudUEyX',
            value: 'DdGGgXQKh',
            name: 'iDUudUEyX=DdGGgXQKh',
          },
        ],
      },
    ];

    expect(
      buildApiFilters({
        tagFilters: filter,
      }).tags
    ).toEqual([
      { key: 'iDUudUEyX', namespace: 'ADbMFCrUQ', value: 'DdGGgXQKh' },
    ]);

    expect(
      buildApiFilters({
        tagFilters: [],
      }).tags
    ).toBe(undefined);
  });
});
