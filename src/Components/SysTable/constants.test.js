import { columns, mergedColumns } from './constants';

const defaultColumns = [
  {
    key: 'displayName',
    sortKey: 'display_name',
    title: 'Name',
  },
  {
    key: 'groups',
    sortKey: 'group_name',
    title: 'Group',
    props: {
      width: 10,
    },
  },
  {
    key: 'tags',
    title: 'Tags',
    props: {
      width: 10,
      isStatic: true,
    },
  },
];

describe('mergedColumns', () => {
  test('should return merged columns with title changed to "Workspace" when isWorkspaceEnabled is true', () => {
    const result = mergedColumns(true, columns)(defaultColumns);

    const expected = [
      {
        title: 'Name',
        key: 'displayName',
        sortBy: ['DISPLAY_NAME'],
        sortKey: 'display_name',
        transforms: [expect.any(Function)],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Workspace',
        key: 'groups',
        sortBy: ['GROUP_NAME'],
        requiresDefault: true,
        sortKey: 'group_name',
        props: {
          width: 10,
          isStatic: false,
        },
      },
      {
        title: 'Tags',
        key: 'tags',
        props: {
          width: 10,
          isStatic: true,
        },
      },
      {
        title: 'OS',
        key: 'osVersion',
        sortBy: ['OS_VERSION'],
        props: {
          width: 10,
        },
        renderFunc: expect.any(Function),
      },
      {
        title: 'Last status',
        transforms: [expect.any(Function)],
        key: 'lastStatus',
        sortBy: ['LAST_STATUS'],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Last matched',
        transforms: [expect.any(Function)],
        key: 'lastMatchDate',
        sortBy: ['LAST_MATCH_DATE'],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Total matches',
        transforms: [expect.any(Function), expect.any(Function)],
        key: 'totalMatches',
        sortBy: ['TOTAL_MATCHES'],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Last scan',
        key: 'lastScanDate',
        sortBy: ['LAST_SCAN_DATE'],
        renderFunc: expect.any(Function),
        props: {},
      },
    ];

    expect(result).toEqual(expected);
  });

  test('should return merged columns with title as "Group" when isWorkspaceEnabled is false', () => {
    const result = mergedColumns(false, columns)(defaultColumns);

    const expected = [
      {
        title: 'Name',
        key: 'displayName',
        sortBy: ['DISPLAY_NAME'],
        sortKey: 'display_name',
        transforms: [expect.any(Function)],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Group',
        key: 'groups',
        sortBy: ['GROUP_NAME'],
        requiresDefault: true,
        sortKey: 'group_name',
        props: {
          width: 10,
          isStatic: false,
        },
      },
      {
        title: 'Tags',
        key: 'tags',
        props: {
          width: 10,
          isStatic: true,
        },
      },
      {
        title: 'OS',
        key: 'osVersion',
        sortBy: ['OS_VERSION'],
        props: {
          width: 10,
        },
        renderFunc: expect.any(Function),
      },
      {
        title: 'Last status',
        transforms: [expect.any(Function)],
        key: 'lastStatus',
        sortBy: ['LAST_STATUS'],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Last matched',
        transforms: [expect.any(Function)],
        key: 'lastMatchDate',
        sortBy: ['LAST_MATCH_DATE'],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Total matches',
        transforms: [expect.any(Function), expect.any(Function)],
        key: 'totalMatches',
        sortBy: ['TOTAL_MATCHES'],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Last scan',
        key: 'lastScanDate',
        sortBy: ['LAST_SCAN_DATE'],
        renderFunc: expect.any(Function),
        props: {},
      },
    ];

    expect(result).toEqual(expected);
  });
});
