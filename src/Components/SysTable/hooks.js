const buildApiFilters = (filters = {}) => {
    const { tagFilters, ...otherFilters } = filters;
    const tagsApiFilter = tagFilters
        ? {
            tags: tagFilters.flatMap((tagFilter) =>
                tagFilter.values.map(
                    (tag) =>
                        `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(
                            tag.tagKey
                        )}=${encodeURIComponent(tag.value)}`
                )
            )
        }
        : {};

    return {
        ...otherFilters,
        ...tagsApiFilter
    };
};

export const useGetEntities = (fetchEntities, { selected, columns } = {}) => {
    const appendDirection = (attributes, direction) =>
        attributes.map((attribute) => `${attribute}:${direction}`);

    const findColumnByKey = (key) =>
        (columns || []).find((column) => column.key === key);

    return async (
        _ids,
        { page = 1, per_page: perPage, orderBy, orderDirection, filters }
    ) => {
        const sortableColumn = findColumnByKey(orderBy);
        const sortBy =
        sortableColumn && sortableColumn.sortBy
            ? appendDirection(sortableColumn.sortBy, orderDirection)
            : undefined;
        const filterForApi = buildApiFilters(filters);

        const fetchedEntities = await fetchEntities(perPage, page, {
            ...filterForApi,
            sortBy
        });
        const {
            entities,
            meta: { totalCount }
        } = fetchedEntities || {};

        return {
            results: entities.map((entity) => ({
                ...entity,
                selected: (selected || []).map((id) => id).includes(entity.id)
            })),
            orderBy,
            orderDirection,
            total: totalCount
        };
    };
};
