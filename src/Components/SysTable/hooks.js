import { useApolloClient } from '@apollo/client';
import { isEmpty, isString } from 'lodash';

export const buildApiFilters = (filters = {}) => {
  const { tagFilters, ...otherFilters } = filters;
  // remove hostGroupFilter/osFilter if they are [], otherwise no results are returned from the API
  isEmpty(otherFilters.hostGroupFilter) && delete otherFilters.hostGroupFilter;
  if (isEmpty(otherFilters.osFilter)) {
    delete otherFilters.osFilter;
  } else {
    // Handle osFilter either as a string (the old way) or an object (the newer implementation)
    otherFilters.osFilter = otherFilters.osFilter.map((os) =>
      isString(os) ? os : os.value
    );
  }

  const tagsApiFilter = tagFilters
    ? {
        tags: tagFilters.flatMap((tagFilter) =>
          tagFilter.values.map((tag) => ({
            namespace: tagFilter.key,
            key: tag.tagKey,
            value: tag.value,
          }))
        ),
      }
    : {};

  return {
    ...otherFilters,
    ...tagsApiFilter,
  };
};

export const useFetchSystems = ({ query, onComplete, onError }) => {
  const client = useApolloClient();

  return (limit, offset, requestVariables = {}) =>
    client
      .query({
        query,
        fetchResults: true,
        fetchPolicy: 'no-cache',
        variables: {
          limit,
          offset,
          ...requestVariables,
        },
      })
      .then(({ data }) => {
        const entities = data?.hostsList || [];
        const result = {
          entities,
          meta: {
            ...(requestVariables.tags && { tags: requestVariables.tags }),
            totalCount: data?.hosts?.totalCount || 0,
          },
        };

        onComplete?.(result);
        return result;
      })
      .catch((error) => {
        if (onError) {
          onError(error);
          return { entities: [], meta: { totalCount: 0 } };
        } else {
          throw error;
        }
      });
};
