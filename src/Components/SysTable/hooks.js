import { useApolloClient } from '@apollo/client';

export const buildApiFilters = (filters = {}) => {
    const { tagFilters, ...otherFilters } = filters;
    const tagsApiFilter = tagFilters
        ? {
            tags: tagFilters.flatMap((tagFilter) =>
                tagFilter.values.map(
                    (tag) =>
                        `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(
                            tag.tagKey
                        )}=${encodeURIComponent(tag.value)}`
                )
            )
        }
        : {};

    return {
        ...otherFilters,
        ...tagsApiFilter
    };
};

const renameInventoryAttributes = ({
    culledTimestamp,
    staleWarningTimestamp,
    staleTimestamp,
    insightsId,
    lastScanned,
    ...system
}) => ({
    ...system,
    updated: lastScanned,
    culled_timestamp: culledTimestamp,
    stale_warning_timestamp: staleWarningTimestamp,
    stale_timestamp: staleTimestamp,
    insights_id: insightsId
});

export const profilesRulesFailed = (profiles) =>
    profiles.flatMap(
        (profile) =>
            profile?.rules?.filter(({ compliant }) => !compliant)
    );

export const systemRulesFailed = (system) =>
    system.testResultProfiles
        ? profilesRulesFailed(system.testResultProfiles)
        : [];

export const systemSupportedByProfiles = (profiles = []) =>
    profiles.reduce((acc, { supported }) => acc && !!supported, true);

export const systemsWithRuleObjectsFailed = (systems) =>
    systems.map((system) => ({
        ...system,
        ruleObjectsFailed: systemRulesFailed(system),
        supported: systemSupportedByProfiles(system.testResultProfiles),
        profiles: system.testResultProfiles
    }));

export const useFetchSystems = ({
    query,
    onComplete,
    onError
}) => {
    const client = useApolloClient();

    return (limit, offset, requestVariables = {}) =>
        client
        .query({
            query,
            fetchResults: true,
            fetchPolicy: 'no-cache',
            variables: {
                limit,
                offset,
                ...requestVariables
            }
        })
        .then(({ data }) => {
            const systems = data?.hostsList || [];
            const entities = systemsWithRuleObjectsFailed(systems).map(
                renameInventoryAttributes
            );
            const result = {
                entities,
                meta: {
                    ...(requestVariables.tags && { tags: requestVariables.tags }),
                    totalCount: data?.hosts?.totalCount || 0
                }
            };

            onComplete?.(result);
            return result;
        })
        .catch((error) => {
            if (onError) {
                onError(error);
                return { entities: [], meta: { totalCount: 0 } };
            } else {
                throw error;
            }
        });
};
