/* eslint-disable no-unused-vars */
import './SigTable.scss';

import { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination/index';
import React, { useEffect, useReducer } from 'react';
import {
    SortByDirection,
    Table,
    TableBody,
    TableHeader,
    cellWidth,
    classNames,
    expandable,
    sortable
} from '@patternfly/react-table/dist/esm/components/Table/index';
import { gqlProps } from '../Common';
import { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';
import { GET_SIGNATURE_TABLE } from '../../operations/queries';
import MessageState from '../MessageState/MessageState';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';
import StatusLabel from '../StatusLabel/StatusLabel';
import { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';
import { Label } from '@patternfly/react-core/dist/esm/components/Label';
import messages from '../../Messages';
import { sigTableFilters } from '../../store/cache';
import { useIntl } from 'react-intl';
import { useQuery } from '@apollo/client';
import { useReactiveVar } from '@apollo/client';
import SignatureDescription from './SignatureDescription';
import InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';
import { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';

const initialState = {
    tableVars: {
        limit: 10,
        offset: 0,
        orderBy: 'LAST_MATCH_DATE_NULLS_LAST_DESC',
        ruleName: ''
    },
    sortBy: {
        index: 4,
        direction: SortByDirection.desc
    },
    rows: []
};
const sortIndices = { 1: 'NAME', 2: 'HAS_MATCH', 3: 'HOST_COUNT', 4: 'LAST_MATCH_DATE_NULLS_LAST' };
const orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;

const tableReducer = (state, action) => {
    switch (action.type) {
        case 'setTableVars':
            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };
        case 'setSortBy':
            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };
        case 'setRows':
            return { ...state, rows: action.payload };
    }

    return state;
};

const SigTable = () => {
    const intl = useIntl();
    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {
        ...initialState
    });
    const { data: sigTableData, loading: sigTableLoading, error: sigTableError } =
        useQuery(GET_SIGNATURE_TABLE, { variables: { ...tableVars, ...useReactiveVar(sigTableFilters) } });
    const columns = [
        { title: intl.formatMessage(messages.sigName), cellFormatters: [expandable], transforms: [sortable, cellWidth(55)] },
        { title: intl.formatMessage(messages.lastStatus), transforms: [cellWidth(10), sortable] },
        { title: intl.formatMessage(messages.systems), transforms: [cellWidth(10), sortable] },
        { title: intl.formatMessage(messages.lastMatched), transforms: [cellWidth(10), sortable] }
    ];

    const page = tableVars.offset / tableVars.limit + 1;
    const sigTableFiltersInitialState =  {
        items: { hasMatch: 'true', isDisabled: ['false'] },
        condition: { hasMatch: true, isDisabled: false }
    };

    const onCollapse = (e, rowKey, isOpen) => {
        const collapseRows = [...rows];
        const sig = collapseRows[rowKey + 1].sigData;

        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };
        collapseRows[rowKey + 1].cells = [{
            title: <SignatureDescription signature={sig} />
        }];
        stateSet({ type: 'setRows', payload: collapseRows });
    };

    const FILTER_CATEGORIES = {
        sig_match: {
            type: 'radio', title: intl.formatMessage(messages.status), urlParam: 'sig_match', values: [
                { label: intl.formatMessage(messages.all), value: 'all' },
                { label: intl.formatMessage(messages.matched), value: 'true' },
                { label: intl.formatMessage(messages.notMatched), value: 'false' }
            ]
        },
        sigs_enabled: {
            type: 'checkbox', title: intl.formatMessage(messages.signaturesEnabledFilter), urlParam: 'sigs_enabled', values: [
                { label: intl.formatMessage(messages.signaturesEnabled), value: 'false' },  // isDisabled: false
                { label: intl.formatMessage(messages.signaturesDisabled), value: 'true' }   // isDisabled: true
            ]
        }
    };
    const filterConfigItems = [{
        label: intl.formatMessage(messages.signature).toLowerCase(),
        filterValues: {
            key: 'text-filter',
            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { ruleName: value, offset: 0 } }),
            value: tableVars.ruleName,
            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.signature).toLowerCase() })
        }
    }, {
        label: FILTER_CATEGORIES.sig_match.title.toLowerCase(),
        type: FILTER_CATEGORIES.sig_match.type,
        id: FILTER_CATEGORIES.sig_match.urlParam,
        value: `radio-${FILTER_CATEGORIES.sig_match.urlParam}`,
        filterValues: {
            key: `${FILTER_CATEGORIES.sig_match.urlParam}-filter`,
            onChange: (e, value) => {
                const tableFilters = sigTableFilters();
                sigTableFilters({
                    items: { ...tableFilters.items, hasMatch: value },
                    condition: { ...tableFilters.condition, hasMatch: (value === 'all') ? undefined : JSON.parse(value) }
                });
            },
            value: sigTableFilters().items?.hasMatch || 'true',
            items: FILTER_CATEGORIES.sig_match.values
        }
    }, {
        label: FILTER_CATEGORIES.sigs_enabled.title.toLowerCase(),
        type: FILTER_CATEGORIES.sigs_enabled.type,
        id: FILTER_CATEGORIES.sigs_enabled.urlParam,
        value: `checkbox-${FILTER_CATEGORIES.sigs_enabled.urlParam}`,
        filterValues: {
            key: `${FILTER_CATEGORIES.sigs_enabled.urlParam}-filter`,
            onChange: (e, value) => {
                const tableFilters = sigTableFilters();
                sigTableFilters({
                    items: { ...tableFilters.items, isDisabled: value },
                    condition: { ...tableFilters.condition, isDisabled: (value.length !== 1) ? undefined : JSON.parse(value[0]) }
                });
            },
            value: sigTableFilters().items?.isDisabled || ['false'],
            items: FILTER_CATEGORIES.sigs_enabled.values
        }
    }];

    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });

    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });

    const onSort = (e, index, direction) =>
        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });

    const setMatchedFilterChips = ({ event, chips = [] }) => {
        // Add/remove chips for the Status filter & set the radio button value and API query variable accordingly
        const tableFilters = sigTableFilters();
        if (event === 'add') {
            let matchedMessage = intl.formatMessage(messages.all);
            if (tableFilters.items?.hasMatch === 'true') {
                matchedMessage = intl.formatMessage(messages.matched);
            } else if (tableFilters.items?.hasMatch === 'false') {
                matchedMessage = intl.formatMessage(messages.notMatched);
            }

            chips.push({
                category: intl.formatMessage(messages.status), value: 'matched',
                chips: [{ name: matchedMessage, value: matchedMessage }]
            });
        } else if (event === 'remove') {
            const [newValue, newCondition] = (tableFilters.items?.hasMatch === 'all') ?
                ['true', true] : ['all', undefined];
            sigTableFilters({
                items: { ...tableFilters.items, hasMatch: newValue },
                condition: { ...tableFilters.condition, hasMatch: newCondition }
            });
        }
    };

    const setEnabledFilterChips = ({ event, chips = [], item = '' }) => {
        // Add/remove chips for the Signatures enabled filter & set the checkbox values and API query variable accordingly
        const tableFilters = sigTableFilters();
        if (event === 'add') {
            tableFilters.items?.isDisabled.map((val) => {
                const enabledMessage = intl.formatMessage(val === 'true' ? messages.signaturesDisabled : messages.signaturesEnabled);
                chips.push({
                    category: intl.formatMessage(messages.signaturesEnabledFilter), value: enabledMessage,
                    chips: [{ name: enabledMessage, value: enabledMessage }]
                });
            });
        } else if (event === 'remove') {
            let [newValue, newCondition] = [[], undefined];
            if (tableFilters.items?.isDisabled.length !== 1) {
                [newValue, newCondition] = (item.value === intl.formatMessage(messages.signaturesEnabled)) ?
                    [['true'], true] : [['false'], false];
            }

            sigTableFilters({
                items: { ...tableFilters.items, isDisabled: newValue },
                condition: { ...tableFilters.condition, isDisabled: newCondition }
            });
        }
    };

    const buildFilterChips = () => {
        const chips = [];
        tableVars?.ruleName &&
            chips.push({
                category: intl.formatMessage(messages.signature), value: 'name',
                chips: [{ name: tableVars?.ruleName, value: tableVars?.ruleName }]
            });
        setMatchedFilterChips({ event: 'add', chips });
        setEnabledFilterChips({ event: 'add', chips });
        return chips;
    };

    const activeFiltersConfig = {
        deleteTitle: intl.formatMessage(messages.resetFilters),
        filters: buildFilterChips(),
        showDeleteButton: true,
        onDelete: (event, itemsToRemove, isAll) => {
            if (isAll) {
                sigTableFilters(sigTableFiltersInitialState);
                stateSet({ type: 'setTableVars', payload: { ruleName: '' } });
            } else {
                itemsToRemove.map((item) => {
                    item.value === 'name' && stateSet({ type: 'setTableVars', payload: { ruleName: '' } });
                    item.value === 'matched' && setMatchedFilterChips({ event: 'remove' });
                    !(item.value === 'name' || item.value === 'matched') && setEnabledFilterChips({ event: 'remove', item });
                });
            }
        }
    };

    useEffect(() => {
        sigTableFilters(sigTableFiltersInitialState);
    }, []);

    useEffect(() => {
        const rowBuilder = data => data?.rulesList?.flatMap((data, key) => {
            const sig = data;
            return [{
                rowId: key,
                isOpen: false,
                cells: [
                    { title:
                        <React.Fragment>
                            <InsightsLink to={`/signatures/${sig.name}`}>{sig.name}</InsightsLink>
                            {sig.isDisabled &&
                                <React.Fragment>
                                    <br />
                                    <Label color='red' isCompact>{intl.formatMessage(messages.disabled)}</Label>
                                </React.Fragment>
                            }
                        </React.Fragment>
                    },
                    { title: sig.isDisabled ? 'N/A' :
                        <StatusLabel isDisabled={sig.isDisabled} hasMatch={sig.hasMatch} displayMatch />
                    },
                    { title: sig.isDisabled ? 'N/A' :
                        <InsightsLink to={`/signatures/${sig.name}`}>{sig.hostCount?.toLocaleString()}</InsightsLink>
                    },
                    { title: sig.isDisabled ? 'N/A' :
                        sig.lastMatchDate ?
                            <Tooltip content={<DateFormat date={new Date(sig.lastMatchDate)} type='exact' />}>
                                <span><DateFormat date={new Date(sig.lastMatchDate)} /></span>
                            </Tooltip>
                            : <Tooltip content={intl.formatMessage(messages.noHostHas)}>
                                <span>{intl.formatMessage(messages.never)}</span>
                            </Tooltip>
                    }
                ]
            }, {
                parent: key * 2,
                sigData: sig,
                fullWidth: true,
                cells: []
            }];
        });

        stateSet({ type: 'setRows', payload: rowBuilder(sigTableData) });
    }, [intl, sigTableData]);

    return <React.Fragment>
        <PrimaryToolbar
            pagination={{
                itemCount: sigTableData?.rules?.totalCount || 0,
                page,
                perPage: tableVars.limit,
                onSetPage(e, page) { onSetPage(e, page); },
                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },
                isCompact: true
            }}
            filterConfig={{ items: filterConfigItems }}
            activeFiltersConfig={activeFiltersConfig}
        />
        {sigTableLoading
            ? <SkeletonTable
                columns={[{ title: '', columnTransforms: [classNames('skeleton-expandable-column')] }, ...columns]}
                rowSize={tableVars.limit}
                sortBy={sortBy}
            />
            : <Table
                className='sigTable'
                aria-label='Signature table'
                onCollapse={onCollapse}
                rows={rows}
                cells={columns}
                onSort={onSort}
                sortBy={sigTableData?.rulesList?.length > 0 ? sortBy : undefined}
                isStickyHeader
            >
                <TableHeader />
                <TableBody />
            </Table>
        }

        {!sigTableLoading && !sigTableError && sigTableData?.rules?.totalCount === 0 &&
            <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}
                text={intl.formatMessage(messages.noResultsMatch)} />}
        {sigTableError && <MessageState className='pf-c-card' variant='large' title='Error' text='error' />}
        <Pagination
            itemCount={sigTableData?.rules?.totalCount || 0}
            widgetId='pagination-options-menu-bottom'
            perPage={tableVars.limit}
            page={page}
            variant={PaginationVariant.bottom}
            onSetPage={onSetPage}
            onPerPageSelect={onPerPageSelect}
        />
    </React.Fragment>;
};

SigTable.propTypes = gqlProps;

export default SigTable;
