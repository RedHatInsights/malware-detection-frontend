import './SigTable.scss';

import { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';
import { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination/index';
import React, { useCallback, useEffect, useState } from 'react';
import { Table, TableBody, TableHeader, expandable } from '@patternfly/react-table/dist/esm/components/Table/index';
import { Text, TextVariants } from '@patternfly/react-core';

import CodeEditor from '../CodeEditor/CodeEditor';
import { DateFormat } from '@redhat-cloud-services/frontend-components/components/DateFormat';
import { Link } from 'react-router-dom';
import Loading from '../../Components/Loading/Loading';
import MessageState from '../MessageState/MessageState';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/PrimaryToolbar';
import StatusLabel from '../StatusLabel/StatusLabel';
import { gqlProps } from '../Common';
import messages from '../../Messages';
import { useIntl } from 'react-intl';

const SigTable = ({ data: sigTableData, loading: sigTableLoading, error: sigTableError, fetchMore: sigTableFetchMore }) => {
    const intl = useIntl();
    const columns = [
        { title: intl.formatMessage(messages.sigNameId), cellFormatters: [expandable] },
        { title: intl.formatMessage(messages.status) },
        { title: intl.formatMessage(messages.systems) },
        { title: intl.formatMessage(messages.added) },
        { title: intl.formatMessage(messages.matched) }
    ];
    const [rows, setRows] = useState([]);
    const rowBuilder = useCallback(data => data?.rules?.edges.flatMap((data, key) => {
        const sig = data.node;
        return [{
            rowId: key,
            isOpen: false,
            cells: [
                { title: <Link to={`/${sig.name}`}>{sig.name}</Link> },
                { title: <span><StatusLabel {...sig} /></span> },
                { title: <span>{sig.systemCount}</span> },
                { title: <span>{sig.metadata.date}</span> },
                {
                    title: <span>{sig.lastMatchDate ?
                        <DateFormat date={new Date(sig.lastMatchDate)} type="onlyDate" /> : intl.formatMessage(messages.never)}</span>
                }]
        }, {
            parent: key * 2,
            fullWidth: true,
            cells: [{
                title: <Grid hasGutter>
                    <GridItem span={6}><CodeEditor code={sig.rawRule} codeType='XML' /></GridItem>
                    <GridItem span={6}> <Text className='ins-l-sigtable--title' component={TextVariants.h6}>
                        {intl.formatMessage(messages.description)}
                    </Text>
                    {sig.metadata.description}
                    </GridItem>
                </Grid>
            }]
        }
        ];
    }), [intl]);
    const onCollapse = (e, rowKey, isOpen) => {
        const collapseRows = [...rows];
        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };
        setRows(collapseRows);
    };

    const [perPage, setPerPage] = useState(10);
    const [page, setPage] = useState(0);

    const onSetPage = (e, page) => {
        console.error(sigTableData.rules.pageInfo, sigTableFetchMore);
        setPage(page);
        sigTableFetchMore({ variables: { cursor: sigTableData.rules.pageInfo.endCursor } });
    };

    const onPerPageSelect = (e, perPage) => {
        setPerPage(perPage);
        sigTableFetchMore({ variables: { first: perPage } });
    };

    useEffect(() => {
        console.error(sigTableData?.rules?.pageInfo, sigTableData);

        setRows(rowBuilder(sigTableData));
    }, [rowBuilder, sigTableData]);

    return <React.Fragment>
        <PrimaryToolbar
            pagination={{
                itemCount: sigTableData?.rules?.totalCount || 0,
                page,
                perPage,
                onSetPage(e, page) { onSetPage(e, page); },
                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },
                isCompact: true
            }}
        // actionsConfig={{ actions }}
        // filterConfig={{ items: filterConfigItems }}
        // activeFiltersConfig={activeFiltersConfig}
        />
        <Table
            className='sigTable'
            aria-label="Signagure table"
            onCollapse={onCollapse}
            rows={rows}
            cells={columns}>
            <TableHeader />
            <TableBody />
        </Table>
        {sigTableLoading && <Loading />}
        {!sigTableLoading && !sigTableError && sigTableData?.rules?.length === 0 &&
            <MessageState className='pf-c-card' variant='large' title='no results womp womp' text='womp womp' />}
        {sigTableError && <MessageState className='pf-c-card' variant='large' title='poop' text='poop' />}
        <Pagination
            itemCount={sigTableData?.rules?.totalCount || 0}
            widgetId="pagination-options-menu-bottom"
            perPage={perPage}
            page={page}
            variant={PaginationVariant.bottom}
            onSetPage={onSetPage}
            onPerPageSelect={onPerPageSelect}
        />
    </React.Fragment>;
};

SigTable.propTypes = gqlProps;

export default SigTable;

